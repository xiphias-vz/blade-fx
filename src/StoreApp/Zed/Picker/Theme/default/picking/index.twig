{% extends template('page-layout-main') %}

{% define data = {
    merchant: merchant,
    activities: activities,
    pickingOrders: pickingOrders,
    requestedDeliveryDates: requestedDeliveryDates,
    requestParamIdSalesOrder: requestParamIdSalesOrder,
    urlOrderPicking: urlOrderPicking,
    urlStopOrderPicking: urlStopOrderPicking,
    formatStartPickingTokenName: formatStartPickingTokenName,
    formatStopPickingTokenName: formatStopPickingTokenName,
    urlContainerSelect: urlContainerSelect
} %}

{% block header %}
    {% include organism('header') with {
        data: {
            headerLocationTitle: data.merchant.name,
            withoutLogo: true,
            pickingZone: true,
        }
    } only %}
{% endblock %}

{% block content %}
    <div class="spacing-y">
        <div style="display: none;" id="sourcetwig" datatype="no filter" datasrc="picking"></div>
        {% set timeOptions = [] %}

        {% for time in data.requestedDeliveryDates %}
            {% set timeOptions = timeOptions | merge([{
                label: time ~ ' ' ~ 'hour' | trans,
                value: time
            }]) %}
        {% endfor %}

        {% include molecule('order-search') with {
            data: {
                selectOptions: timeOptions
            }
        } only %}

        {% for pickingOrder in data.pickingOrders %}
            {% embed molecule('order-item') with {
                class: 'js-order-search__item',
                data: {
                    reference: pickingOrder.reference,
                    collectNumber: pickingOrder.collectNumber,
                    productsCount: pickingOrder.itemCount,
                    productsCountFull: pickingOrder.totalItemCount,
                    customerFullName: pickingOrder.customerFullName,
                    date: pickingOrder.requestedDeliveryDate | split(' ') | first | date('d.m.y'),
                    dayOfTheWeek: pickingOrder.dayOfTheWeek,
                    deadline: pickingOrder.requestedDeliveryDate | split(' ') | last ~ ' ' ~ 'hour' | trans
                },
                embed: {
                    pickingOrder: pickingOrder,
                    urlContainerSelect: data.urlContainerSelect,
                    urlStopOrderPicking: data.urlStopOrderPicking,
                    requestParamIdSalesOrder: data.requestParamIdSalesOrder,
                    formatStartPickingTokenName: data.formatStartPickingTokenName,
                    formatStopPickingTokenName: data.formatStopPickingTokenName,
                },
                attributes: {
                    'data-order': pickingOrder.collectNumber | lower,
                    'data-pickupstatus': pickingOrder.pickupStatus | lower,
                    'data-reference': pickingOrder.reference | lower,
                    'data-time': pickingOrder.requestedDeliveryDate | split(' ') | last,
                }
            } only %}
                {% block action %}
                    {% if embed.pickingOrder.isPicked %}
                        <form action="{{ embed.urlStopOrderPicking }}" method="post">
                            <input type="hidden" name="{{ embed.requestParamIdSalesOrder }}" value="{{ embed.pickingOrder.idSalesOrder }}">
                            {% set tokenName = embed.formatStopPickingTokenName | format(embed.pickingOrder.idSalesOrder) %}
                            <input type="hidden" name="token" value="{{ csrf_token(tokenName) }}">
                            <button type="submit" class="button button--small button--table button--expand button--warning">
                                {{ 'picker.picking.order.action.stop' | trans }}
                            </button>
                        </form>
                    {% else %}
                        <form action="{{ embed.urlContainerSelect }}" method="post">
                            <input type="hidden" name="{{ embed.requestParamIdSalesOrder }}" value="{{ embed.pickingOrder.idSalesOrder }}">
                            {% set tokenName = embed.formatStartPickingTokenName | format(embed.pickingOrder.idSalesOrder) %}
                            <input type="hidden" name="token" value="{{ csrf_token(tokenName) }}">
                            <button type="submit" class="button button--small button--table button--expand">
                                {{ 'picker.picking.order.action.start' | trans }}
                            </button>
                        </form>
                    {% endif %}
                {% endblock %}

                {% block additionalContent %}
                    <div class="grid grid--expand">
                        <div class="col col--left order-item__cart-note">
                            {{ embed.pickingOrder.cartNote }}
                        </div>
                    </div>
                {% endblock %}
            {% endembed %}
        {% endfor %}
    </div>
{% endblock content %}
