{% extends template('page-layout-main') %}

{% define data = {
    merchant: merchant,
    maxPickingBags: maxPickingBags,
    collectNumber: collectNumber,
    itemsCount: itemsCount,
    itemsToShelfMap: itemsToShelfMap,
    itemsToAlternativeEanMap: itemsToAlternativeEanMap,
    itemsToProductAttributesMap: itemsToProductAttributesMap,
    pickingForm: pickingForm,
    pickingFormSkuKeys: pickingFormSkuKeys,
    pickingFormWeightKeys: pickingFormWeightKeys,
    itemsToShelfMap: itemsToShelfMap,
    itemImageUrls: itemImageUrls,
    requestParamIdSalesOrder: requestParamIdSalesOrder,
    idSalesOrder: idSalesOrder,
    formatStartPickingTokenName: formatStartPickingTokenName,
    orderReference: orderReference,
    orderDeliveryTime: orderDeliveryTime,
    containerInfo: containerInfo,
    ordersCount: ordersCount,
    ordersInfo: ordersInfo,
    urlContainerSelect: urlContainerSelect,
    orderItemCounter: orderItemCounter,
    itemsCount: itemsCount,
    pickedItemsCount: pickedItemsCount,
    notPickedItemsCount: notPickedItemsCount
} %}

{% block header %}
    {% embed organism('header') with {
        modifiers: ['picking-detail'],
        data: {
            withoutLogo: true,
            orderId: data.orderReference,
            buttonUrl: '/picker/picking',
            orderReference: data.orderReference,
            containerSelect: true
        },
        embed: {
            productsLength: data.itemsCount,
        },
    } only %}
        {% block headerBottom %}
            {% include molecule('pick-products') with {
                data: {
                    productsLength: embed.productsLength,
                },
                attributes: {
                    'products-count': embed.productsLength,
                    'order-id': data.orderId,
                },
            } only %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block content %}
    {{ form_start(data.pickingForm, {
        attr: { class: 'form js-submit-form-handler__form spacing-top spacing-top--inner' }
    }) }}

        <input type="hidden" name="{{ data.requestParamIdSalesOrder }}" value="{{ data.idSalesOrder }}">
        {% set tokenName = data.formatStartPickingTokenName | format(data.idSalesOrder) %}
        <input type="hidden" name="token" value="{{ csrf_token(tokenName) }}">
        <input type="hidden" name="counter" value="{{ data.orderItemCounter }}">
        <input type="hidden" name="itemsCount" value="{{ data.itemsCount }}">
        <input type="hidden" name="pickedItemsCount" value="{{ data.pickedItemsCount }}">
        <input type="hidden" name="notPickedItemsCount" value="{{ data.notPickedItemsCount }}">

            {% set field = attribute(data.pickingForm.children, data.pickingFormSkuKeys | first) %}
            {% set itemSku = field.vars.name | split('__') | last %}

            {% if pickingFormWeightKeys[itemSku] is defined %}
                {% set weightField = attribute(data.pickingForm.children, pickingFormWeightKeys[itemSku]) %}
            {% else %}
                {% set weightField = null %}
            {% endif %}

            {% if field.vars.block_prefixes[1] is same as('integer') %}
                {% embed molecule('product-item') with {
                    class: 'spacing-top spacing-top--big',
                    data: {
                        imageUrl: data.itemImageUrls,
                        shelfData: data.itemsToShelfMap,
                        title: field.vars.label,
                        productsCount: field.vars.attr.max,
                        itemSku: itemSku,
                        itemsToShelfMap: itemsToShelfMap,
                        itemsToProductAttributesMap: data.itemsToProductAttributesMap,
                        field: field,
                        urlContainerSelect: urlContainerSelect,
                        collectNumber: collectNumber,
                        itemsCount: itemsCount,
                        idSalesOrder: data.idSalesOrder,
                        alternativeEanData: data.itemsToAlternativeEanMap,
                        itemSku: itemSku,
                        itemsToShelfMap: itemsToShelfMap,
                        itemsToProductAttributesMap: itemsToProductAttributesMap,
                        field: field,
                        urlContainerSelect: urlContainerSelect,
                        collectNumber: collectNumber,
                        itemsCount: itemsCount,
                        idSalesOrder: data.idSalesOrder,
                        pickedItemsCount: pickedItemsCount,
                        notPickedItemsCount: notPickedItemsCount,
                    },
                    attributes: {
                        'data-sku': itemSku,
                    },
                    embed: {
                        field: field,
                        weightField: weightField,
                    },
                } only %}
                    {% block formElement %}
                        {{ form_row(embed.field, {
                            attr: {
                                class: config.jsName ~ '__quantity',
                            }
                        }) }}
                    {% endblock %}
                {% endembed %}
            {% endif %}

    {{ form_end(data.pickingForm) }}

    {% include molecule('additional-order-buttons') with {
        data: {
            idSalesOrder: data.idSalesOrder,
            urlContainerSelect: urlContainerSelect
        }
    } only %}

{% endblock content %}
