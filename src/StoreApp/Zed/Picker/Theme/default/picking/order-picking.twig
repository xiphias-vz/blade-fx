{% extends template('page-layout-main') %}

{% define data = {
    merchant: merchant,
    maxPickingBags: maxPickingBags,
    collectNumber: collectNumber,
    itemsCount: itemsCount,
    pickingForm: pickingForm,
    pickingFormSkuKeys: pickingFormSkuKeys,
    pickingFormWeightKeys: pickingFormWeightKeys,
    itemImageUrls: itemImageUrls,
    requestParamIdSalesOrder: requestParamIdSalesOrder,
    idSalesOrder: idSalesOrder,
    orderReference: orderReference,
    orderDeliveryTime: orderDeliveryTime,
} %}

{% block header %}
    {% embed organism('header') with {
        modifiers: ['picking-detail'],
        data: {
            withoutLogo: true,
            orderId: data.orderReference,
            buttonUrl: '/picker/picking',
            orderReference: data.orderReference,
        },
        embed: {
            productsLength: data.itemsCount,
        },
    } only %}
        {% block headerBottom %}
            {% include molecule('pick-products') with {
                data: {
                    productsLength: embed.productsLength,
                },
                attributes: {
                    'products-count': embed.productsLength,
                    'order-id': data.orderId,
                },
            } only %}
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block content %}
    {{ form_start(data.pickingForm, {
        attr: { class: 'form js-submit-form-handler__form spacing-top spacing-top--inner' }
    }) }}
        {% for fieldName in pickingFormSkuKeys %}
            {% set field = attribute(data.pickingForm.children, fieldName) %}
            {% set itemSku = field.vars.name | split('__') | last %}

            {% if pickingFormWeightKeys[itemSku] is defined %}
                {% set weightField = attribute(data.pickingForm.children, pickingFormWeightKeys[itemSku]) %}
            {% else %}
                {% set weightField = null %}
            {% endif %}

            {% if field.vars.block_prefixes[1] is same as('integer') %}
                {% embed molecule('product-item') with {
                    class: 'spacing-top spacing-top--big',
                    data: {
                        imageUrl: data.itemImageUrls[itemSku],
                        title: field.vars.label,
                        productsCount: field.vars.attr.max
                    },
                    attributes: {
                        'data-sku': itemSku,
                    },
                    embed: {
                        field: field,
                        weightField: weightField,
                    },
                } only %}
                    {% block formElement %}
                        {{ form_row(embed.field, {
                            attr: {
                                class: config.jsName ~ '__quantity',
                            }
                        }) }}
                    {% endblock %}

                    {% block formElementWeight %}
                        {% if embed.weightField %}
                            {{ form_row(embed.weightField, {
                                attr: {
                                    class: config.jsName ~ '__weight',
                                }
                            }) }}
                        {% endif %}
                    {% endblock %}
                {% endembed %}
            {% endif %}
        {% endfor %}

        <div class="box spacing-y spacing-y--big">
            <div class="grid grid--no-wrap">
                <div class="col col--sm-5">
                    {% include atom('thumbnail') with {
                        modifiers: ['large'],
                        attributes: {
                            src: publicPath('images/spryker-bag.png'),
                        },
                    } only %}
                </div>
                <div class="col col--expand spacing-left spacing-left--big spacing-left--inner grid grid--col">
                    <div class="box box--bordered box--spaceless box--expand spacing-bottom spacing-bottom--big">
                        {% include atom('icon-row') with {
                            modifiers: ['center'],
                            data: {
                                iconName: 'bag',
                                rowText: 'Total bags' | trans,
                            },
                        } only %}
                    </div>
                    {% include molecule('quantity-counter') with {
                        modifiers: ['no-spacing', 'expand'],
                        data: {
                            maxQuantity: data.maxPickingBags,
                            readOnly: true,
                        },
                    } only %}
                </div>
            </div>
        </div>

    <div class="pick-products__action-wrapper">
        <div class="pick-products__action js-pick-products__action">
            {% embed molecule('popup-ui') with {
                data: {
                    buttons: {
                        submit: {
                            isButton: true,
                            additionalClass: 'js-pick-products__submit',
                        },
                    },
                },
                embed: {
                    collectNumber: data.collectNumber,
                },
            } only %}
                {% block content %}
                    <div class="grid grid--center">
                        <div class="col--sm-8">
                            {% embed atom('app-label') with {
                                class: 'spacing-right',
                                modifiers: ['picked', 'count'],
                            } only %}
                                {% block body %}
                                    <span class="js-pick-products__picked">0</span>
                                {% endblock %}
                            {% endembed %}
                            {{ 'picked' | trans }}
                        </div>
                    </div>
                    <div class="grid grid--center spacing-y">
                        <div class="col--sm-8">
                            {% embed atom('app-label') with {
                                class: 'spacing-right',
                                modifiers: ['not-found', 'count'],
                            } only %}
                                {% block body %}
                                    <span class="js-pick-products__not-picked">0</span>
                                {% endblock %}
                            {% endembed %}
                            {{ 'not found' | trans }}
                        </div>
                    </div>
                    <div class="grid grid--center spacing-bottom spacing-bottom--big">
                        <div class="col--sm-8">
                            {% embed atom('app-label') with {
                                class: 'spacing-right',
                                modifiers: ['bordered', 'count'],
                            } only %}
                                {% block body %}
                                    <span class="js-pick-products__bags">1</span>
                                {% endblock %}
                            {% endembed %}
                            {{ 'bags' | trans }}
                        </div>
                    </div>
                    {% if embed.collectNumber %}
                        <div class="text-center spacing-top--big">
                            <p class="text-bold spacing-bottom">{{ 'Collect Number' | trans }}: {{ embed.collectNumber }}</p>
                        </div>
                    {% endif %}
                {% endblock %}

                {% block button %}
                    <div class="text-center">
                        <div class="button button--expand button--disabled js-pick-products__submit-button {{ config.jsName }}__open">
                            {{ 'picker.picking.confirmation' | trans }}
                        </div>
                    </div>
                {% endblock %}
            {% endembed %}
        </div>
    </div>

    <input type="hidden" name="{{ data.requestParamIdSalesOrder }}" value="{{ data.idSalesOrder }}">
    {{ form_end(data.pickingForm) }}
{% endblock content %}
