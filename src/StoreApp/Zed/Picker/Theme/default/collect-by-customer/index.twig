{% extends template('page-layout-main') %}

{% define data = {
    merchant: merchant,
    activities: activities,
    collectionOrders: collectionOrders,
    requestedDeliveryDates: requestedDeliveryDates,
    paramIdSalesOrder: paramIdSalesOrder,
    urlCollectByCustomerConfirmation: urlCollectByCustomerConfirmation,
    urlCollectByCustomerCancellation: urlCollectByCustomerCancellation,
    urlCollectByCustomerDetails: urlCollectByCustomerDetails,
} %}

{% block header %}
    {% include organism('header') with {
        data: {
            headerLocationTitle: 'collect.by.customer.header' | trans,
            withoutLogo: true,
            titleColor: 'lightOrange'
        }
    } only %}
{% endblock %}

{% block content %}
    <div class="spacing-y">
        <div style="display: none;" id="sourcetwig" datatype="ready for collection" datasrc="collect-by-customer"></div>

        {% set timeOptions = [] %}

        {% for time in data.requestedDeliveryDates %}
            {% set timeOptions = timeOptions | merge([{
                label: time ~ ' ' ~ 'hour' | trans,
                value: time
            }]) %}
        {% endfor %}

        {% include molecule('order-search') with {
            data: {
                selectOptions: timeOptions
            }
        } only %}
        {% for collectionOrder in data.collectionOrders %}
            {% set isCollectionOrderFinished = collectionOrder.collected or collectionOrder.cancelled %}

            {% embed molecule('order-item-abholung') with {
                class: 'js-order-search__item',
                modifiers: ['picked', 'expanded', 'with-bottom', 'bordered'],
                data: {
                    reference: collectionOrder.reference,
                    collectNumber: collectionOrder.collectNumber,
                    productsCount: collectionOrder.pickedProductCount,
                    date: collectionOrder.requestedDeliveryDate | split(' ') | first | date('d/m/Y'),
                    deadline: collectionOrder.requestedDeliveryDate | split(' ') | last ~ ' ' ~ 'hour' | trans,
                    dayOfTheWeek: collectionOrder.dayOfTheWeek,
                    queuedTime: collectionOrder.queuedTime,
                    calculatedWaitingTime: collectionOrder.calculatedWaitingTime,
                    fullName: collectionOrder.fullName,
                    pickupStatus: collectionOrder.pickupStatus,
                    numberOfContainers: collectionOrder.numberOfContainersInOrder,
                    isCollectionOrderFinished: isCollectionOrderFinished,
                    collectionOrder: collectionOrder,
                    paramIdSalesOrder: data.paramIdSalesOrder,
                    urlCollectByCustomerCancellation: data.urlCollectByCustomerCancellation,
                    urlCollectByCustomerConfirmation: data.urlCollectByCustomerConfirmation,
                    urlCollectByCustomerDetails: data.urlCollectByCustomerDetails,
                },
                attributes: {
                    'data-order': collectionOrder.collectNumber | lower,
                    'data-pickupstatus': collectionOrder.pickupStatus | lower,
                    'data-reference': collectionOrder.reference | lower,
                    'data-ordersBeforeReadyToCollectStatus': collectionOrder.ordersBeforeReadyToCollectStatus,
                    'data-time': collectionOrder.requestedDeliveryDate | split(' ') | last,
                    'data-queued-time': collectionOrder.queuedTime,
                },
                embed: {
                    collectionOrder: collectionOrder,
                    paramIdSalesOrder: data.paramIdSalesOrder,
                    urlCollectByCustomerCancellation: data.urlCollectByCustomerCancellation,
                    urlCollectByCustomerConfirmation: data.urlCollectByCustomerConfirmation,
                    urlCollectByCustomerDetails: data.urlCollectByCustomerDetails,
                    isCollectionOrderFinished: isCollectionOrderFinished
                }
            } only %}
                {% block action %}{% endblock %}

                {% block orderReference %}
                    {% if embed.isCollectionOrderFinished %}
                        {% include atom('app-label') with {
                            class: 'text-center',
                            modifiers: ['reference'],
                            data: {
                                text: 'Order ID' | trans ~ ': ' ~ data.reference
                            }
                        } only %}
                    {% endif %}
                {% endblock %}

                {% block additionalFields %}
                    <div class="grid grid--expand">
                        <div class="col col--sm-12 spacing-top">
                            {% include molecule('product-type') with {
                                modifiers: ['list'],
                                data: {
                                    productTypes: embed.collectionOrder.pickedProductTypes | default(),
                                    withoutText: true,
                                },
                            } only %}
                        </div>
                    </div>
                {% endblock %}

                {% block orderDetailsForm %}
                    {% if not embed.isCollectionOrderFinished %}
                        <div class="grid grid--middle">
                            <div class="col col--sm-6">
                                <form action="{{ embed.urlCollectByCustomerDetails }}" method="POST" class="js-submit-form-handler__form">
                                    <input type="hidden" name="{{ embed.paramIdSalesOrder }}" value="{{ embed.collectionOrder.idSalesOrder }}">
                                    {% block button %}
                                        <div class="text-center">
                                            <input type="submit" value=">" class="button button--abholung js-pick-products__submit-button" />
                                        </div>
                                    {% endblock %}
                                </form>
                            </div>
                        </div>
                    {% endif %}
                {% endblock %}

                {% block additionalContent %}
                <div class="{{config.name}}__customer-info">
                    {% embed molecule('customer-info') with {
                        modifiers: ['width-100'],
                        data: {
                            fullName: data.fullName,
                            customerCartNote: embed.collectionOrder.cartNote,
                            isDetailPage: false
                        },
                    } only %}

                    {% block body %}
                        <div class="grid grid--middle width-100">
                            <input type="hidden" class="detail-page" value="{% if data.isDetailPage == true %}true{% else %}false{% endif %}">
                            <div class="col {{ config.name }}__content-abholung {{ config.name }}--width-100">
                                {% if data.isDetailPage == true %}
                                    <div class="{{ config.name }}__titleDiv"><span class="{{ config.name }}__title">{{ 'customer.comment' | trans }}</span></div>
                                {% endif %}
                                <div class="{{ config.name }}__fontColor {{ config.name }}__customer-name">{{ data.fullName }}</div>
                                <div class="{{ config.name }}__cart-note--info is-hidden with-border-bottom from-bottom">
                                    <div class="{{ config.name }}__title {{ config.name }}--width-100">{{ 'customer.comment' | trans }}</div>
                                    <div class="{{ config.name }}__chevron"></div>
                                </div>
                                <div class="{{ config.name }}__cart-note from-bottom is-hidden text-left"
                                     value="{% if data.customerCartNote %}true{% else %}false{% endif %}">
                                    {{ data.customerCartNote }}
                                </div>
                            </div>
                        </div>
                    {% endblock %}
                {% endembed %}
                </div>
                    {% if embed.collectionOrder.collected %}
                        <div class="hr-line-solid {{ config.name }}__hr-line"></div>
                    {% elseif embed.collectionOrder.cancelled %}
                        <div class="hr-line-solid {{ config.name }}__hr-line"></div>
                    {% endif %}

                    <div class="{{ config.name }}__bottom-info">
                        {% if embed.collectionOrder.collected %}
                            <div class="grid grid--justify grid--middle">
                                <div class="col">
                                    {{ embed.collectionOrder.collectedAt | date('H:i') }} {{ 'hour' | trans }}
                                </div>
                                <div class="col">
                                    {% include atom('app-label') with {
                                        modifiers: ['success'],
                                        data: {
                                            text: 'picker.collect-by-customer.order.status.collected' | trans
                                        }
                                    } only %}
                                </div>
                            </div>
                        {% elseif embed.collectionOrder.cancelled %}
                            <div class="grid grid--justify grid--middle">
                                <div class="col"></div>
                                <div class="col">
                                    {% include atom('app-label') with {
                                        modifiers: ['info', 'margin'],
                                        data: {
                                            text: 'picker.collect-by-customer.order.status.cancelled' | trans
                                        }
                                    } only %}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                {% endblock %}
            {% endembed %}
        {% endfor %}
    </div>

    {% include atom('append-new-order', 'Picker') %}
{% endblock content %}
