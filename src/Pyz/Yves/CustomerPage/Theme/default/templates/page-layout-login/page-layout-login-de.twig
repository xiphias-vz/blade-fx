
{% define data = {
    isLogin: false,
    scriptSrc: app.customerCDCApiUrl,
    reCaptchaKey: app.reCaptchaSiteKey,
    forms: {
        registration: _view.registerForm,
        customer: _view.customer
    }
} %}

{% block container %}
    <style>
        .button--maxLarge {
            width: 100%;
        }

        .stepTitle {
            margin-bottom: 5px;
        }
        .form-desc {
            margin-top: 4px;
            margin-bottom: 20px;
        }

        .customLogin-footer {
            margin-top: 10px;
        }

        .btn-link {
            background-color: transparent !important;
            color: #7c7c7c !important;
        }

        .btn-link:hover,
        .btn-link:focus,
        .btn-link:active
        {
            background-color: transparent !important;
            color: #7c7c7c !important;
        }

        .hr-line-solid {
            border-bottom: 1px solid black;
            background-color: rgba(0, 0, 0, 0);
            border-style: solid !important;
            margin-top: 15px;
            margin-bottom: 15px;
            width: 100%;
        }

        .hintText {
            color: #71747c;
        }

        .helpLink {
            text-decoration: none;
        }

        .linkOrange {
            color: #ea8901;
            background-color: transparent;
            cursor: pointer;
            font-weight: 700;
        }

        .cancelBtn {
            border: 1px solid;
        }

        #customerPasswordDiv, #ForgotPasswordLinkDiv, #btnLogin {
            display: none;
        }

        #ForgotPasswordLinkDiv {
            margin-top: 10px;
        }

        #forgotPasswordDiv, #temporarilyLockedOutDiv, #accountDisabledDiv {
            display: none;
        }

        #forgotPasswordMessage, #passwordForgotEmailMessage, #temporarilyLockedOutMessage, #accountDisabledMessage {
            color: #FF3400;
        }

        #emailCheckIcon, #startRegister_emailCheckIcon, #passwordToggleEye, #startRegister_passwordToggleEye {
            display: none;
            position: absolute;
            bottom: 21px;
            right: 20px;
            width: 24px;
            height: 24px;
            background: transparent;
        }

        #passwordToggleEye, #startRegister_passwordToggleEye {
            display: block;
            position: absolute;
            bottom: 28px;
            right: 28px;
            width: 24px;
            height: 24px;
            background: transparent;
            cursor: pointer;
        }

        #customerEmailDiv,
        #startRegister_customerEmailDiv,
        #customerPasswordDiv,
        #startRegister_customerPasswordDiv {
            position: relative;
        }

        #additionalLoginForm {
            display: none;
        }

        #checkoutCustomerRegister {
            display: none;
        }

        #startRegister_passwordCheckBoxes {
            display: none;
        }

        #btnCancelLogin {
            text-decoration: none;
        }

        #btnContinueRegistration, #btnCancelLogin, #btnCheckMailOrCard, #btnBackToLogin  {
            cursor: pointer;
        }

        input[type='checkbox'] {
            appearance: none;
        }

        input[type='checkbox']:checked:after {
            content: "\2714";
            font-size: 14px;
            border: none;
            background-color: #B8DCC3;
            color: white;
            border-radius: 3px;
        }

        .checkboxError {
            border: 1px solid grey;
            width: 12px;
            height: 15px;
            border-radius: 3px;
        }

        .page-layout-customer__form-wrap {
            border-style: hidden;
        }

        @media screen and (max-width: 768px) {
            .register-form-tablet-width {
                margin: 0 1rem 0;
            }
        }

        .btn-cancel-margin {
            margin-top: -5.8rem !important;
        }

        @media screen and (max-width: 768px) {
            .btn-cancel-margin {
                margin-top: -2rem !important;
            }
        }

        .form--checkout-actions {
            width: 100%;
        }

        .description-passwordForgot {
            margin-bottom: 25px;
        }

        #passwordForgotEmail, #customLoginFormEmail, #emailAlreadyUsed {
            height: 40px;
            padding: 10px;
        }

        .validation-success {
            background-color: #B8DCC3;
        }

        .validation-invalid {
            background-color: #cb3d49;
        }

        #passwordForgotEmailMessage, #customLoginFormEmailMessage, #emailAlreadyUsedMessage {
            color: black;
        }

    </style>

    <div class="page-layout-customer page-layout-customer--login-wrap register-form-tablet-width">
        <div class="box box--checkout page-layout-customer__form-wrap">

            <div id="additionalLoginForm" class="form form--login form--checkout-actions">
                <h2 class="createCustomerTitle">{{ 'checkout.step.customer.login.create_customer_title' | trans }}</h2>
                <form name="startRegistrationForm" method="post" novalidate="novalidate">
                    <div class="form__container">
                        <div class="form__fields grid grid--top">
                            <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                <div class="form__container">
                                    <div id="startRegister_customerEmailDiv" class="form__fields grid grid--top">
                                        <div class="form__field col col--sm-12">
                                            <label for="startRegistrationForm_customer_email" class="label label--required">{{ 'checkout.step.customer.login.emailField.labelCreate' | trans }}</label>
                                            <input id="startRegistrationForm_customer_email" name="startRegistrationForm[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholderCreate' | trans }}" class="input input--expand" type="email" >
                                            <span id="startRegister_emailCheckIcon" class="icon-check"></span>
                                            <div id="emailAlreadyUsed" class="is-hidden">
                                                <span id="emailAlreadyUsedMessage"></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="startRegister_customerPasswordDiv" class="form__fields grid grid--top">
                                        <div class="form__field col col--sm-12">
                                            <label for="startRegister__customer_password" class="label label--required">{{ 'auth.password' | trans }}</label>
                                            <input id="startRegister__customer_password" name="startRegistrationForm[customer][password]" required="required" placeholder="{{ 'customer.login.password_placeholder' | trans }}" class="input input--expand" type="password" >
                                            <button type="button" id="startRegister_passwordToggleEye" class="icon-eye"></button>
                                        </div>
                                    </div>
                                    <div id="startRegister_passwordCheckBoxes" class="form__fields grid grid--top">
                                        <div class="form__field col col--sm-12">
                                            <label for="passwordCheckBoxes" class="label label--required">{{ 'register.page.password.checkboxes.label' | trans}}</label>
                                            <div><input id="passwordCheckBoxes_length" name="passwordCheckBoxes[length]" type="checkbox" onclick="return false;" />
                                                <label for="passwordCheckBoxes_length" class="label">{{ 'register.page.password.check.length' | trans }}</label></div>
                                            <div><input id="passwordCheckBoxes_specChar" name="passwordCheckBoxes[specChar]" placeholder="{{ 'customer.login.password_placeholder' | trans }}" type="checkbox" onclick="return false;" />
                                                <label for="passwordCheckBoxes_specChar" class="label">{{ 'register.page.password.check.spec.char' | trans }}</label></div>
                                            <div><input id="passwordCheckBoxes_digit" name="passwordCheckBoxes[digit]" placeholder="{{ 'customer.login.password_placeholder' | trans }}" type="checkbox" onclick="return false;" />
                                                <label for="passwordCheckBoxes_digit" class="label">{{ 'register.page.password.check.digit' | trans }}</label></div>
                                            <div><input id="passwordCheckBoxes_letter" name="passwordCheckBoxes[letter]" placeholder="{{ 'customer.login.password_placeholder' | trans }}" type="checkbox" onclick="return false;" />
                                                <label for="passwordCheckBoxes_letter" class="label">{{ 'register.page.password.check.letter' | trans }}</label></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form__actions">
                            <button id="btnContinueRegistration" type="button" class="col col--middle button button--expand-tablet button--maxLarge" disabled>{{ 'general.next.button' | trans }}</button>
                        </div>

                        <div class="customLogin-footer form__actions">
                            <button id="btnCancelLogin" type="button" class="btn btn-link col col--middle">{{ 'general.cancel.button' | trans }}</button>
                        </div>

                        <div class="hr-line-solid"></div>

                        <p id="basicHelpText" class="hintText">> <a class="helpLink" href="https://globus.zendesk.com/hc/de" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                    </div>
                </form>
            </div>

            <div id="loginAPI" class="form form--login form--checkout-actions register-form">
                <h2 class="stepTitle">{{ 'global.login' | trans }}</h2>
                <p class="form-desc">{{ 'checkout.step.customer.desc.form' | trans }}</p>
                <form name="customLoginForm" method="post" novalidate="novalidate">
                    <div class="form__container">
                        <div class="form__fields grid grid--top">
                            <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                <div class="form__container">
                                    <div id="customerEmailDiv" class="form__fields grid grid--top">
                                        <div class="form__field col col--sm-12">
                                            <label for="customLoginForm_customer_email" class="label label--required">{{ 'checkout.step.customer.login.emailField.label' | trans }}</label>
                                            <input id="customLoginForm_customer_email" name="customLoginForm[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholderCreate' | trans }}" class="input input--expand" type="email" >
                                            <span id="emailCheckIcon" class="icon-check"></span>
                                        </div>
                                    </div>
                                    <div id="customerPasswordDiv" class="form__fields grid grid--top" >
                                        <div class="form__field col col--sm-12">
                                            <label for="customLoginForm_customer_password" class="label label--required">{{ 'auth.password' | trans }}</label>
                                            <input id="customLoginForm_customer_password" name="customLoginForm[customer][password]" placeholder="{{ 'customer.login.password_placeholder' | trans }}" class="input input--expand" type="password" >
                                            <button type="button" id="passwordToggleEye" class="icon-eye"></button>
                                        </div>
                                    </div>
                                    <div id="customLoginFormEmail" class="is-hidden">
                                        <span id="customLoginFormEmailMessage"></span>
                                    </div>
                                    <div id="forgotPasswordDiv">
                                        <span id="forgotPasswordMessage">{{ 'checkout.step.customer.login.invalidPassword' | trans }}</span>
                                        <input id="captchaGeneratedToken" type="hidden" />
                                    </div>
                                    <div id="temporarilyLockedOutDiv">
                                        <span id="temporarilyLockedOutMessage">{{ 'checkout.step.customer.login.accountTemporarilyLockedOut' | trans }}</span>
                                        <input id="captchaGeneratedToken" type="hidden" />
                                    </div>
                                    <div id="accountDisabledDiv">
                                        <span id="accountDisabledMessage">{{ 'checkout.step.customer.login.accountDisabled' | trans }}</span>
                                        <input id="captchaGeneratedToken" type="hidden" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form__actions">
                            <button id="btnCheckMailOrCard" type="button" class="col col--middle button button--expand-tablet button--maxLarge" data-qa="submit-button">
                                {{ 'general.next.button' | trans }}
                            </button>
                            <button id="btnLogin" type="button" class="col col--middle button button--expand-tablet button--maxLarge">{{ 'general.next.button' | trans }}</button>
                        </div>

                        <div id="ForgotPasswordLinkDiv" onclick="showForgotPassword()">
                            <a class="helpLink"  href="#">{{ 'global.recover.password' | trans }}?</a>
                        </div>

                    </div>
                </form>
                <div class="customLogin-footer form__actions">
                    <a id="btnCancelLogin" onclick="cancelLogin()" type="button" class="btn btn-link col col--middle">{{ 'general.cancel.button' | trans }}</a>
                </div>

                <div class="hr-line-solid"></div>

                <p id="basicHelpText" class="hintText">> <a class="helpLink" href="https://globus.zendesk.com/hc/de" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                <p id="newUserHelpText" class="hintText">> {{ 'checkout.step.customer.login.new_user_text' | trans }} <button id="btnRegisterUser" class="helpLink linkOrange">{{ 'checkout.step.customer.login.globus_account_text' | trans }}</button></p>
            </div>

            <div id="checkoutCustomerRegister" class="js-customer-page-login-register grid">
                <div class="col col--sm-12 col--lg-6 spacing spacing--bigger spacing--inner">
                    {% embed molecule('register-page-left-side') only %}
                    {% endembed %}
                </div>

                <div class="col col--sm-12 col--lg-6 spacing spacing--bigger spacing--inner"  id="page-layout-customer_register2">
                    {% embed molecule('form-register') with {
                        class: 'register-form js-login__register',
                        modifiers: ['checkout-actions'],
                        data: {
                            form: data.forms.registration,
                            submit: {
                                enable: false,
                                text: 'checkout.customer.auth_as_user' | trans,
                                class: 'form__action--checkout col col--middle button button--expand-tablet button--large',
                            },
                        },embed: {
                            forms: {
                                customer: data.forms.customer,
                            },
                        },
                        qa: 'register-form'
                    } only %}
                        {% block fields %}
                            {% include molecule('customer-confirmation-form', 'CustomerConfirmationPage') ignore missing %}
                        {% endblock %}
                    {% endembed %}
                    {% embed molecule('popup-ui-address-validation') with {
                    } only %}
                    {% endembed %}
                    <span id="errorMessageAboveSubmitButton"></span>
                </div>

                    {% block CancelRegisterButton %}
                        <div class="col col--sm-12 col--lg-6 spacing spacing--bigger spacing--inner btn-cancel-margin">
                            <button id="btnCancelRegister" type="button" class="btn-link form__action form__action--checkout col col--middle button button--expand-tablet button--large cancelBtn" style="margin-bottom: 5px;">{{ 'general.cancel.button' | trans }}</button>
                        </div>
                    {% endblock %}
            </div>

            <div id="passwordForgotFormDiv" class="form form--login form--checkout-actions register-form is-hidden">
                <h2 class="stepTitle">{{ 'forget.password' | trans }}</h2>
                <form name="passwordForgotForm" method="post" novalidate="novalidate">
                    <div class="form__container">
                        <div class="form__fields grid grid--top">
                            <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                <div class="form__container">
                                    <div id="passwordForgotEmailDiv" class="form__fields grid grid--top">
                                        <div class="form__field col col--sm-12">
                                            <p class="description-passwordForgot">{{ 'enter.your.email.address.for.reset.password.title.1' | trans }}, {{ 'enter.your.email.address.for.reset.password.title.2' | trans }}:</p>
                                            <label for="txt_email_or_card_for_pass_reset" class="label label--required">{{ 'checkout.step.customer.login.emailField.label' | trans }}</label>
                                            <input id="txt_email_or_card_for_pass_reset" name="forgotPassForms[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholder' | trans }}" class="input input--expand" type="email" >
                                        </div>
                                    </div>
                                    <div id="passwordForgotEmail" class="is-hidden">
                                        <span id="passwordForgotEmailMessage"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form__actions">
                            <button id="btnCallForgotPasswordApi" type="button" class="form__action col col--middle button button--expand-tablet button--maxLarge" data-qa="submit-button">
                                {{ 'send' | trans }}
                            </button>
                            <button id="btnLogin" type="button" class="form__action col col--middle button button--expand-tablet button--maxLarge">{{ 'general.next.button' | trans }}</button>
                        </div>
                    </div>
                </form>
                <div class="customLogin-footer form__actions">
                    <a id="btnBackToLogin" onclick="backToLoginForm()" type="button" class="btn btn-link col col--middle">{{ 'return.sign.in' | trans }}</a>
                </div>

                <div class="hr-line-solid"></div>

                <p id="basicHelpText" class="hintText">> <a class="helpLink" href="https://globus.zendesk.com/hc/de" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                <p id="newUserHelpText" class="hintText">> {{ 'checkout.step.customer.login.new_user_text' | trans }} <a id="lnkRegisterUser" class="helpLink linkOrange" href="/register">{{ 'checkout.step.customer.login.globus_account_text' | trans }}</a></p>

            </div>
        </div>
    </div>

    <script type="text/javascript">

        function showForgotPassword() {
            $("#loginAPI").css("display", "none");
            $("#passwordForgotFormDiv").removeClass("is-hidden");
        }

        function backToLoginForm() {
            $("#passwordForgotFormDiv").addClass("is-hidden");
            $("#customerPasswordDiv").css("display", "block");
            $("#ForgotPasswordLinkDiv").css("display", "block");
            $("#newUserHelpText").css("display", "none");
            $('#btnCheckMailOrCard').css("display", "none");
            $("#btnLogin").css("display", "block");
            $("#emailCheckIcon").css("display", "block");
            $("#loginAPI").css("display", "block");
            $("#passwordForgotEmail").remove();
        }

        function cancelLogin() {
            localStorage.setItem('cancelLogin', "true");
            location.reload();
        }

        $(document).ready(function () {
            let passwordField = document.querySelector('#customLoginForm_customer_password');
            let isLoginCancelled = localStorage.getItem('cancelLogin');
            if(isLoginCancelled === "true") {
                passwordField.setAttribute('autocomplete', 'new-password');
            } else {
                passwordField.removeAttribute('autocomplete');
            }
        })

        function checkoutStep(option)
        {
            window.dataLayer.push({
                'event': 'eec.checkout',
                'ecommerce':
                    {
                        'checkout':
                            {
                                'actionField':
                                    {
                                        'step': '1',
                                        'option': option,
                                    }
                            },
                    },
            });
        }

        var emailField = $('#startRegistrationForm_customer_email');
        var passField = $('#startRegister__customer_password');
        var regGlobalEmail = /^\S+@\S+$/;
        var regGlobalPass = /^(?=.*\d)(?=.*[a-zA-Z])(?=.*\W)(?!.*\s).{8,}$/;

        var btnCheck = document.getElementById('btnCheckMailOrCard');
        if(btnCheck != null)
        {
            btnCheck.addEventListener('click', function()
            {
                var emailOrCardNumber = $("#customLoginForm_customer_email").val();
                const url = "/login/check-availability"

                if(emailOrCardNumber != ""){
                    $.ajax(url, {
                        type: 'POST',  // http method
                        data: { id: emailOrCardNumber },  // data to submit
                        success: function (data, status, xhr) {
                            let response = JSON.parse(data);
                            if(response.isAvailable === true){
                                $("#loginAPI").css("display", "none");
                                $("#additionalLoginForm").css("display", "block");

                                $("#startRegistrationForm_customer_email").val(emailOrCardNumber);
                            }
                            else
                            {
                                $("#customerPasswordDiv").css("display", "block");
                                $("#ForgotPasswordLinkDiv").css("display", "block");
                                $('#btnCheckMailOrCard').css("display", "none");
                                $("#btnLogin").css("display", "block");
                                $("#emailCheckIcon").css("display", "block");
                                $('#newUserHelpText').css("display", "none");
                            }
                        },
                        error: function (jqXhr, textStatus, errorMessage) {
                        }
                    });
                }
                else {
                    $("#customLoginFormEmail").removeClass("is-hidden");
                    $("#customLoginFormEmail").addClass("validation-invalid");
                    $("#customLoginFormEmailMessage").text("{{ 'validation.not_blank' | trans }}");
                    return false;
                }
            });
        }

        var btnContinueRegistrationCheck = document.getElementById('btnContinueRegistration');
        if(btnContinueRegistrationCheck != null)
        {
            btnContinueRegistrationCheck.addEventListener('click', function()
            {
                var emailOrCardNumber = $("#startRegistrationForm_customer_email").val();
                const url = "/login/check-availability"

                if(emailOrCardNumber != ""){
                    $.ajax(url, {
                        type: 'POST',  // http method
                        data: { id: emailOrCardNumber },  // data to submit
                        success: function (data, status, xhr) {
                            let response = JSON.parse(data);
                            if (response.isAvailable === true) {
                                checkoutStep('register');
                                $("#additionalLoginForm").css("display", "none");
                                $("#checkoutCustomerRegister").css("display", "block");
                                $("#registerForm_customer_email").val($("#startRegistrationForm_customer_email").val());
                                $("#registerForm_customer_password_pass").val($("#startRegister__customer_password").val());
                                $("#registerForm_customer_password_confirm").val($("#startRegister__customer_password").val());
                            }
                            else {
                                $("#emailAlreadyUsed").removeClass("is-hidden");
                                $("#emailAlreadyUsed").addClass("validation-invalid");
                                $("#emailAlreadyUsedMessage").text("{{ 'customer.email.already.used' | trans }}");
                                return false;
                            }
                        },
                        error: function (jqXhr, textStatus, errorMessage) {
                        }
                    });
                }
            });
        }

        $("#btnLogin").click(function()
        {
            var emailOrCardNumber = $("#customLoginForm_customer_email").val();
            var password = $("#customLoginForm_customer_password").val();
            var captchaGeneratedToken = $("#captchaGeneratedToken").val();
            const loginUrl = '/login/globus-login';

            $.ajax(loginUrl, {
                type: 'POST',  // http method
                data: { id: emailOrCardNumber, password: password, captchaToken: captchaGeneratedToken  },  // data to submit
                success: function (data, status, xhr) {
                    var response = JSON.parse(data);

                    if(response["successfullyLoggedIn"] === true){
                        document.querySelector("#loginForm_email.input").value = emailOrCardNumber;
                        document.querySelector("#loginForm_password.input").value = password
                        document.querySelector("#loginForm_data").value = JSON.stringify(response);
                        document.getElementsByName("loginForm")[0].submit();
                        localStorage.setItem('cancelLogin', 'false');

                    } else {
                        $("#customLoginForm_customer_password").css("border", "1px solid red");
                        switch (response.message) {
                            case "Account temporarily locked out":
                                $("#temporarilyLockedOutDiv").css("display", "block");
                                break;
                            case "Account Disabled":
                                $("#accountDisabledDiv").css("display", "block");
                                break;
                            default:
                                $("#forgotPasswordDiv").css("display", "block");
                        }

                        if(response["showCaptcha"] === true){
                            grecaptcha.ready(function() {
                                grecaptcha.execute('{{ data.reCaptchaKey }}', {action: 'login'}).then(function(token) {
                                    $("#captchaGeneratedToken").val(token);
                                });
                            });
                        }
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                }
            });
        });

        $("#btnCancelLogin").click(function(){
            window.location.reload();
        });

        $("#btnCancelRegister").click(function(){
            window.location.reload();
        });

        $("#passwordToggleEye").click(function(){
            var el = $("#customLoginForm_customer_password")[0];
            if(el.type === "password"){
                el.type = "text";
            }
            else
            {
                el.type = "password";
            }

            $("#passwordToggleEye").toggleClass("icon-eye");
            $("#passwordToggleEye").toggleClass("icon-eyeclosed");
        });

        $("#startRegister_passwordToggleEye").click(function(){
            var el = $("#startRegister__customer_password")[0];
            if(el.type === "password"){
                el.type = "text";
            }
            else
            {
                el.type = "password";
            }

            $("#startRegister_passwordToggleEye").toggleClass("icon-eye");
            $("#startRegister_passwordToggleEye").toggleClass("icon-eyeclosed");
        });

        $("#startRegistrationForm_customer_email").on('input', function(ev) {
            let pass = ev.currentTarget.value;
            let password = passField.val();

            var reg = /^\S+@\S+$/;
            if (reg.test(pass) && regGlobalPass.test(password)) {
                $("#btnContinueRegistration").removeAttr("disabled");
            }
            else {
                $("#startRegistrationForm_customer_email").css("border", "2px solid red");
                $("#btnContinueRegistration").prop("disabled", "true");
            }
        });

        $("#startRegister__customer_password").on('input', function(ev){
            let pass = ev.currentTarget.value;
            let email = emailField.val();

            $("#startRegister_passwordCheckBoxes").css("display", "block");
            if(pass.length > 8){
                $("#passwordCheckBoxes_length").prop("checked", "true");
                $("#passwordCheckBoxes_length").removeClass("checkboxError");
            }
            else {
                $("#passwordCheckBoxes_length").removeAttr("checked");
                $("#passwordCheckBoxes_length").addClass("checkboxError");
            }

            let regSpecialChars = /\W/;
            if(regSpecialChars.test(pass)){
                $("#passwordCheckBoxes_specChar").prop("checked", "true");
                $("#passwordCheckBoxes_specChar").removeClass("checkboxError");
            }
            else {
                $("#passwordCheckBoxes_specChar").removeAttr("checked");
                $("#passwordCheckBoxes_specChar").addClass("checkboxError");
            }

            let regDigits = /\d/;
            if(regDigits.test(pass)){
                $("#passwordCheckBoxes_digit").prop("checked", "true");
                $("#passwordCheckBoxes_digit").removeClass("checkboxError");
            }
            else {
                $("#passwordCheckBoxes_digit").removeAttr("checked");
                $("#passwordCheckBoxes_digit").addClass("checkboxError");
            }

            let regLetters = /[a-zA-Z]/;
            if(regLetters.test(pass)){
                $("#passwordCheckBoxes_letter").prop("checked", "true");
                $("#passwordCheckBoxes_letter").removeClass("checkboxError");
            }
            else {
                $("#passwordCheckBoxes_letter").removeAttr("checked");
                $("#passwordCheckBoxes_letter").addClass("checkboxError");
            }

            var regPass = /^(?=.*\d)(?=.*[a-zA-Z])(?=.*\W)(?!.*\s).{8,}$/;
            if (regPass.test(pass) && regGlobalEmail.test(email)) {
                $("#btnContinueRegistration").removeAttr("disabled");
            }
            else {
                $("#startRegister__customer_password").css("border", "2px solid red");
                $("#btnContinueRegistration").prop("disabled", "true");
            }

        });


        $("#btnRegisterUser").click(function(){
            checkoutStep('register');
            $("#loginAPI").css("display", "none");
            $("#additionalLoginForm").css("display", "block");
        });

        $("#lnkRegisterUser").click(function(){
            checkoutStep('register');
        });

        $("#btnCallForgotPasswordApi").click(function(){
            const url = '/password/reset';
            var emailOrKundenkartenummer = $("#txt_email_or_card_for_pass_reset").val();
            if(emailOrKundenkartenummer === ""){
                showErrorBox("{{ 'validation.not_blank' | trans }}");
                return false;
            }

            $.ajax(url, {
                type: 'POST',
                dataType: 'json',
                data: {
                    id: emailOrKundenkartenummer
                },
                success(data, status, xhr) {
                    showSuccessBox("{{ 'checkout.validation.mailSentMsg' | trans }}");
                },
                error(jqXhr, textStatus, errorMessage) {
                    showErrorBox("Error");
                },
            });
        });

        function showSuccessBox(message){
            $("#passwordForgotEmail").removeClass("is-hidden");
            $("#passwordForgotEmail").addClass("validation-success");
            $("#passwordForgotEmailMessage").text(message);
        }

        function showErrorBox(message){
            $("#passwordForgotEmail").removeClass("is-hidden");
            $("#passwordForgotEmail").addClass("validation-invalid");
            $("#passwordForgotEmailMessage").text(message);
        }

    </script>

{% endblock %}
