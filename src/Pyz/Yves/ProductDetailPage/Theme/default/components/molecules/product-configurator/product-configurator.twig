{% extends model('component') %}

{% define config = {
    name: 'product-configurator',
    tag: 'section'
} %}

{% define data = {
    product: required,
    maxQuantity: 10,
    depositPrice: null,
    tags: [],
} %}

{% set options = [] %}
{% set productName = data.product.name | default %}
{% set sku = data.product.sku %}
{% set availabilityWidget = '' %}
{% set isProductConcrete = data.product.idProductConcrete is not empty %}
{% set isDisabled = data.product.idProductConcrete is empty or data.product.price is empty %}
{% set isProductAvailable = true %}

{% for index in 1..data.maxQuantity %}
    {% set options = options | merge([{
        label: index,
        value: index
    }]) %}
{% endfor %}

{% set isAvailable = data.product.idProductConcrete and data.product.available %}
{% set isDisabled = not isAvailable or isDisabled %}

{% set productDiscontinuedNoteWidget = findWidget('ProductDiscontinuedNoteWidget', [sku]) %}
{% if productDiscontinuedNoteWidget.isDiscontinued is not null %}
    {% set isDisabled = productDiscontinuedNoteWidget.isDiscontinued or isDisabled %}
    {% set isProductAvailable = not productDiscontinuedNoteWidget.isDiscontinued %}
{% endif %}

{% set productSaleUnit = data.product.attributes['verpackungseinheit'] | default(null) %}
{% set productSaleVolume = data.product.attributes['grundpreisinhalt'] | default(null) %}

{% block body %}

    <span class="brand-text">{{ 'product.attribute.manufacturer_name' | trans}}: </span>
    {% if data.product.attributes['supplier'] %}
        <span>
            {{ data.product.attributes['supplier'] }}
        </span>
    {% endif %}

    <h2 class="title title--product">{{ productName }} - {% if data.product.attributes.einzelgewicht is defined %} {{ data.product.attributes.einzelgewicht|replace('.', ',') }} {% else %} {{ productSaleVolume|round(2, 'floor') }} {% endif %}  {{ data.product.attributes["grundpreismasseinheit"] }}</h2>

    <div class="{{ config.name }}__info">

        <div class="align-right">
            {% widget 'ProductPriceVolumeWidget' args [data.product] only %}
            {% nowidget %}
                {% include molecule('money-price') with {
                    modifiers: ['pdp'],
                    data: {
                        amount: data.product.price,
                        originalAmount: data.product.prices.ORIGINAL is not defined ? null : data.product.prices.ORIGINAL,
                    }
                } only %}
            {% endwidget %}
        </div>

        {% if data.product.attributes["grundpreismasseinheit"] is defined and productSaleVolume is defined %}
            <div class="text-secondary">
{#                {{ (data.product.price / productSaleVolume) / 100 | round(2, 'floor') }}€/{{ data.product.attributes["grundpreismasseinheit"] }}#}
            </div>
        {% endif %}

        <div class="grid">

            <div class="text-secondary">
{#                {% if data.product.attributes.einzelgewicht is defined %}#}

                    {{ data.product.price / 100 | replace('.', ',')}} €/{{ data.product.attributes.grundpreisinhalt|round(2, 'floor') }} {{ data.product.attributes.grundpreismasseinheit }}

{#                {% endif %}#}
            </div>

{#            {% if data.product.attributes.einzelgewicht is defined %}#}
{#                <div class="text-secondary">#}
{#                    {{ data.product.attributes.einzelgewicht }} {{ productSaleUnit }}#}
{#                </div>#}
{#            {% else %}#}
{#                <div class="text-secondary">#}
{#                    {{  productSaleVolume|round(2, 'floor') }} {{ productSaleUnit }}#}
{#                        {{ (data.product.price * (productSaleVolume|round(2, 'floor') / data.product.attributes.einzelgewicht )) }}#}
{#                </div>#}
{#            {% endif %}#}

{#            <div class="text-secondary">#}
{#                {{ (data.product.price / (productSaleVolume / data.product.attributes.einzelgewicht )) }}#}
{#            </div>#}

        </div>
    </div>
    {% include molecule('variant-configurator', 'ProductDetailPage') with {
        data: {
            superAttributes: data.product.attributeMap.superAttributes,
            selectedAttributes: data.product.selectedAttributes,
            availableAttributes: data.product.availableAttributes
        }
    } only %}

    <form method="POST" action="{{ path("cart/add", {"sku": sku}) }}">
        <input type="hidden" name="token" value="{{ csrf_token('add-to-cart') }}"/>
        {% widget 'ProductOptionConfiguratorWidget' args [data.product] only %}{% endwidget %}

        {% widget 'ProductPackagingUnitWidget' args [data.product, isDisabled, options] only %}
        {% elsewidget 'ManageProductMeasurementUnitWidget' args [data.product, isDisabled, options] only %}
        {% nowidget %}

            <div class="grid grid--justify">
                <div class="col col--sm-12 col--lg-5 spacing-bottom">
                    {% if not isDisabled %}
                        {% include molecule('quantity-counter') with {
                            modifiers: ['quantity-large', 'no-spacing'],
                            data: {
                                readOnly: true,
                            },
                        } only %}
                    {% else %}
                        <input type="hidden" class="js-volume-price__quantity"/>
                    {% endif %}

                    {% widget 'ProductDiscontinuedNoteWidget' args [data.product.sku] only %}{% endwidget %}
                </div>
                <div class="col col--sm-12 col--lg-7 spacing-bottom">
                    <button type="submit" class="button button--large button--expand button--alternative" {{ isDisabled ? 'disabled' }} {{ qa('add-to-cart-button') }} data-init-single-click>
                        {% include atom('icon') with {
                            modifiers: ['big'],
                            data: {
                                name: 'cart-plus',
                            },
                        } only %}

                        {{ 'page.detail.add-to-cart' | trans }}
                    </button>
                </div>
            </div>
        {% endwidget %}
    </form>

    {% if not isAvailable and isProductConcrete %}
        {% widget 'AvailabilityNotificationSubscriptionWidget' args [data.product] only %}{% endwidget %}
    {% endif %}

    {% if isProductAvailable %}
        {% include molecule('wishlist-selector-for-pdp', 'WishlistWidget') ignore missing with {
            data: {
                sku: data.product.sku,
                idProductConcrete: data.product.idProductConcrete | default
            }
        } only %}
    {% endif %}

{% endblock %}
