{% extends model('component') %}

{% define config = {
    name: 'product-card-item',
    tag: 'article',
} %}

{% define data = {
    product: {},
    productItem: required,
    attributes: [],
    options: [],
    idQuote: data.product.idQuote | default(null),
    isPromotionItem: false,
    canEditCart: true,
    additionalContainerClass: 'grid--justify grid--no-wrap grid--stretch',
    productOptionsModifiers: [],
} %}

{% set canEditCart = (not is_granted('IS_AUTHENTICATED_FULLY') or can('WriteSharedCartPermissionPlugin', data.idQuote)) and data.canEditCart %}
{% set productItemBox = (data.productItem.productOptions is defined and data.productItem.productOptions is empty) ? '' : config.name ~ '__box--with-options' %}

{% block body %}
    <div class="{{ component.renderClass(config.name ~ '__box', modifiers) }} {{ productItemBox }}">
        <div class="grid {{ data.additionalContainerClass }}">
            {% block image %}
                <a href="{{ data.productItem.url }}"
                   class="{{ component.renderClass(config.name ~ '__image', modifiers) }} col">
                    {% include molecule('product-image') with {
                        data: {
                            name: data.productItem.name | default,
                            image: data.productItem.images[0].externalUrlLarge | default(null),
                        },
                    } only %}

                    {% block labels %}{% endblock %}

                    {% block groups %}{% endblock %}
                </a>
            {% endblock %}

            <div class="{{ component.renderClass(config.name ~ '__content', modifiers) }} col">
                {% block contentInner %}
                    {% block headingGrid %}
                        <div class="{{ component.renderClass(config.name ~ '__general-information', modifiers) }}">
                            {% block heading %}
                                <div class="{{ component.renderClass(config.name ~ '__heading', modifiers) }}">
                                    {% block title %}
                                        <a href="{{ data.productItem.url }}"
                                           class="{{ component.renderClass(config.name ~ '__title', modifiers) }}">
                                            {{ data.productItem.name }}
                                        </a>
                                    {% endblock %}

                                    {% block productQuantityInformation %}
                                        <div class="{{ config.name }}__quantity-measurement-line grid">
                                            {% if data.productItem.amountSalesUnit is not empty %}
                                                {% include molecule('packaging-unit-cart') ignore missing with {
                                                    data: {
                                                        amount: data.productItem.amount,
                                                        quantity: data.productItem.quantity,
                                                        quantitySalesUnit: data.productItem.quantitySalesUnit,
                                                        quantityConversion: data.productItem.quantitySalesUnit.conversion,
                                                        quantityProductMeasurementUnit: data.productItem.quantitySalesUnit.productMeasurementUnit,
                                                        amountSalesUnit: data.productItem.amountSalesUnit,
                                                        amountConversion: data.productItem.amountSalesUnit.conversion,
                                                        amountProductMeasurementUnit: data.productItem.amountSalesUnit.productMeasurementUnit,
                                                        amountValue: data.productItem.amountSalesUnit.value
                                                    }
                                                } only %}
                                            {% elseif data.productItem.quantitySalesUnit is not empty %}
                                                <span class="spacing-right">{{ 'cart.item_quantity' | trans }}: {{ data.productItem.quantity }}</span>
                                                {% widget 'CartProductMeasurementUnitQuantitySelectorWidget' args [data.productItem] only %}{% endwidget %}
                                            {% else %}
                                                <span class="spacing-right">{{ 'cart.item_quantity' | trans }}: {{ data.productItem.quantity }}</span>
                                            {% endif %}

                                        </div>
                                    {% endblock %}

                                    {% block summaryContent %}
                                        {% block summary %}
                                            {% if data.productItem.productOptions is defined and data.productItem.productOptions is not empty %}
                                                {% include molecule('product-item-summary') with {
                                                    modifiers: ['cart'] | merge(data.productOptionsModifiers),
                                                    data: {
                                                        productItem: data.productItem,
                                                    },
                                                } only %}
                                            {% endif %}
                                        {% endblock %}
                                    {% endblock %}

                                    {% block unitPrice %}
                                        <div class="{{ config.name }}__price-unit is-hidden-sm-lg">
                                            {% set price = data.productItem.unitPrice is defined ? data.productItem.unitPrice : data.productItem.price %}

                                            {% include molecule('money-price') with {
                                                modifiers: ['cart'],
                                                class: component.renderClass(config.name ~ '__price', modifiers),
                                                data: {
                                                    amount: price | default(null),
                                                    originalAmount: null,
                                                },
                                            } only %}
                                        </div>
                                    {% endblock %}
                                </div>
                            {% endblock %}

                            {% block quantityCondition %}
                                {% if not data.isPromotionItem %}
                                    {% block quantity %}
                                        {% set removeUrl = path('cart/remove', {'sku': data.productItem.sku, 'groupKey': data.productItem.groupKey }) %}
                                        <div class="{{ component.renderClass(config.name ~ '__quantity', modifiers) }}">
                                            {% if canEditCart %}
                                                <form method="POST"
                                                      action="{{ path('cart/change/quantity', {'sku': data.productItem.sku }) }}">
                                                    <input type="hidden" name="token"
                                                           value="{{ csrf_token('change-cart') }}">
                                                    {% include molecule('product-quantity-input') with {
                                                        data: {
                                                            maxQuantity: data.productItem.maxQuantity,
                                                            value: data.productItem.quantity,
                                                            removeUrl: removeUrl,
                                                        },
                                                    } only %}
                                                    <input type="hidden" value="{{ data.productItem.groupKey }}"
                                                           name="groupKey">
                                                </form>
                                            {% else %}
                                                <span
                                                    class="{{ component.renderClass(config.name ~ '__text-quantity', modifiers) }}">{{ 'cart.item_quantity' | trans }}: {{ data.productItem.quantity }}</span>
                                            {% endif %}
                                        </div>
                                    {% endblock %}
                                {% endif %}
                            {% endblock %}

                            {% block price %}
                                <div class="{{ config.name }}__price-col">
                                    {% set price = data.productItem.unitPrice is defined ? data.productItem.unitPrice : data.productItem.price %}
                                    {% set productItemSubTotal = data.productItem.quantity is not empty ? data.productItem.quantity * price : price %}

                                    {% include molecule('money-price') with {
                                        modifiers: ['cart'],
                                        class: component.renderClass(config.name ~ '__price', modifiers | merge(['subtotal'])),
                                        data: {
                                            amount: productItemSubTotal | default(null),
                                            originalAmount: null,
                                        },
                                    } only %}
                                </div>
                            {% endblock %}

                            {% block removeButton %}
                                {% if canEditCart and not data.isPromotionItem %}
                                    <form method="POST"
                                          action="{{ path('cart/remove', {'sku': data.productItem.sku, 'groupKey': data.productItem.groupKey}) }}">
                                        <input type="hidden" name="token" value="{{ csrf_token('change-cart') }}">
                                        <button
                                            class="{{ component.renderClass(config.name ~ '__remove', modifiers) }} link link--darkest link--edit"
                                            value="{{- 'product_cart_item.remove' | trans | raw -}}">
                                            {% include atom('icon') with {
                                                data: {
                                                    name: 'bin',
                                                },
                                            } only %}
                                        </button>
                                    </form>
                                {% endif %}
                            {% endblock %}
                        </div>
                    {% endblock %}

                    {% block content %}{% endblock %}

                    {% block actions %}{% endblock %}
                {% endblock %}
            </div>

            {% block additionalInfo %}{% endblock %}
        </div>
    </div>
{% endblock %}
