{% extends molecule('search-form', '@SprykerShop:ShopUi') %}

{% block extraClass %} {{ config.jsName }}{% endblock %}

{% define data = {
    currentCodeBucket: app.currentCodeBucket
} %}

{% block body %}
    {% if data.currentCodeBucket != 'DE' %}
        <form action="{{ data.searchUrl }}">
            <div class="grid grid--middle grid--no-wrap">
                <button class="{{ config.name }}__submit button button--skinless">
                    {% if app.currentCodeBucket == 'DE' %}
                        {% include atom('icon') with {
                            class: 'icon--color-orange',
                            modifiers: ['big'],
                            data: {
                                name: 'search',
                            },
                        } only %}
                    {% else %}
                        {% include atom('icon') with {
                            class: 'icon--color-green',
                            modifiers: ['big'],
                            data: {
                            name: 'search',
                            },
                        } only %}
                    {% endif %}
                </button>

                <input name="q"
                       type="text"
                       class="input input--expand input--search suggest-search__input {{ config.name }}__input {{ config.jsName }}__input--{{ attributes['data-search-id'] }}"
                       placeholder="{{ 'global.search' | trans }}"
                       value="{{ data.searchValue }}"
                       autocomplete="off">

               <button class="{{ config.name }}__clear {{ config.jsName }}__clear button button button--clear is-hidden" type="button">
                    {% if app.currentCodeBucket == 'DE' %}
                        {% include atom('icon') with {
                            class: 'icon--color-orange',
                            data: {
                                name: 'close-circle',
                            },
                        } only %}
                    {% else %}
                        {% include atom('icon') with {
                            class: 'icon--color-green',
                            data: {
                                name: 'close-circle',
                            },
                        } only %}
                    {% endif %}
                </button>
            </div>

            {% include molecule('suggest-search') with {
                attributes: {
                    'suggestion-url': path('search/suggestion'),
                    'input-class-name': config.jsName ~ '__input--' ~ attributes['data-search-id'],
                    'wrap-class-name': config.jsName,
                    'wrap-active-class-name': config.name ~ '--active',
                    'clear-button-class-name': config.jsName ~ '__clear',
                },
            } only %}
        </form>
        <script>
            function submitToCartButton(
                data_product_id,
                data_product_sku,
                data_product_name,
                data_product_price,
                ajax_url
            ){
                let forma = document.getElementById("submit-suggested-search-product")
                let product_id = document.getElementById("data-product-id")
                let product_sku = document.getElementById("data-product-sku")
                let product_name = document.getElementById("data-product-title")
                let product_price = document.getElementById("data-product-price")
                let formData = new FormData(forma)
                let is_button_clicked = document.getElementById('is-cart-button-clicked')

                product_id.value = data_product_id
                product_sku.value = data_product_sku
                product_name.value = data_product_name
                product_price.value = data_product_price
                forma.action = ajax_url
                is_button_clicked.value = 'y'

                fetch(ajax_url, {method: 'POST', body: formData})
                    .then(response => response.json())
                    .then(parsedResponse => {
                        if (parsedResponse.error.length > 0) {
                            return;
                        }
                        replaceQuantity(parsedResponse.quantity);
                        replaceAmount(parsedResponse.amount);
                        is_button_clicked.value = 'n';
                        console.log(is_button_clicked.value);
                    }).catch(error => {
                    console.error(error);
                });
                //turns back focus on searchbox - condition for triggering logic for closing this element
                document.getElementsByClassName("suggest-search__input")[0].focus();

                const productSkuFromSuggest = data_product_sku.split('_abstract');
                const productSkuFromSuggestWithQuantity = [[productSkuFromSuggest[0], 1]];
                if (localStorage.getItem('productItemsForSyncCounter')) {
                    let productItemsForSyncCounter = JSON.parse(localStorage.getItem('productItemsForSyncCounter'));

                    for (let i = 0; i < productItemsForSyncCounter.length; i++) {
                        if (productItemsForSyncCounter[i][0].includes(productSkuFromSuggest[0])) {
                            productItemsForSyncCounter[i][1]++;
                        }
                    }
                    if (!JSON.stringify(productItemsForSyncCounter).includes(JSON.stringify(productSkuFromSuggestWithQuantity[0][0]))) {
                        productItemsForSyncCounter.push(productSkuFromSuggestWithQuantity[0]);
                    }

                    localStorage.setItem('productItemsForSyncCounter', JSON.stringify(productItemsForSyncCounter));
                } else {
                    localStorage.setItem('productItemsForSyncCounter', JSON.stringify(productSkuFromSuggestWithQuantity));
                }
            }

            function replaceQuantity(quantity){
                let quantityElements = document.getElementsByClassName('js-ajax-add-to-cart__quantity');
                let i;
                for (i=0; i < quantityElements.length; i++){
                    quantityElements[i].innerHTML = quantity;
                }
            }

            function replaceAmount(amount) {
                let amountElements = document.getElementsByClassName('js-ajax-add-to-cart__amount');
                let i;
                for (i=0; i < amountElements.length; i++){
                    amountElements[i].innerHTML = amount;
                }
            }
        </script>
        <form class="add-to-cart-ajax" method="POST" name="submit-suggested-search-products" id="submit-suggested-search-product"
              action="">
            <input type="hidden" name="is-cart-button-clicked" id="is-cart-button-clicked" value="n" />
            <input type="hidden" name="data-product-id" id="data-product-id" value="" />
            <input type="hidden" name="data-product-sku" id="data-product-sku" value="" />
            <input type="hidden" name="data-product-title" id="data-product-title" value="" />
            <input type="hidden" name="data-product-price" id="data-product-price" value="" />
            <input type="hidden" name="token" id="token" value="{{ csrf_token('add-to-cart-ajax') }}" />
        </form>
    {% else %}
        {% include molecule('searchbox', 'FactFinderWebComponents') with {
            class: config.name ~ '__search-form',
            attributes: {
                'data-search-id': 'desktop',
            },
            data: {
                properties: {
                    component: 'suggest-onfocus="true"
                    use-suggest="true"'
                },
                searchValue: data.searchValue,
                searchUrl: data.searchUrl
            }
        } only %}

        {% include molecule('suggest', 'FactFinderWebComponents') with {
            class: 'suggest__hide',
            data: {
                properties: {
                    component: '',
                    productItemType: 'productName',
                    searchItems: [
                        {
                            'type': 'searchTerm',
                            'title': 'Search term'
                        },
                        {
                            'type': 'category',
                            'title': 'Category'
                        },
                        {
                            'type': 'brand',
                            'title': 'Brand Suggestion'
                        },
                        {
                            'type': 'productName',
                            'title': 'Product Suggestion'
                        },
                    ],
                }
            }
        } only %}

    {% endif %}

{% endblock %}
