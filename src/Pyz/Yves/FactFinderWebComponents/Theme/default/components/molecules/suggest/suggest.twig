{% extends model('component') %}

{% define config = {
    name: 'suggest',
    tag: 'suggest-ff'
} %}

{% define data = {
    properties: {
        component: '',
        searchItems: [],
        productItemType: '',
    },
    itemWeight: null,
    noPriceText: '---',
    prefix: null,
    calculatedPrice: null,
} %}

{% block body %}
    <ff-suggest layout="block" class="input--expand transitionDisplay" ~ {{ data.properties.component|raw }}>
        {% block searchContainer %}
            <section id="searchContainer" class="searchTermContainer">
                {% for item in data.properties.searchItems %}
                    <div class="{{ config.name }}__search-container" data-container="{{ item.type }}">
                        <p class="containerCaption" hidden>{{ item.title }}</p>
                        <ff-suggest-item type="{{ item.type }}" class="{{ config.name }}__suggested-product-slot">

                            {% set imageUrl %}
                                {% verbatim %}
                                    {{ attributes.ImageUrl }}
                                {% endverbatim %}
                            {% endset %}

                            {% set name %}
                                {% verbatim %}
                                    {{ name }}
                                {% endverbatim %}
                            {% endset %}

                            {% set amount %}
                                {% verbatim %}
                                    {{ attributes.geoInformation.0.geoValues.Price }}
                                {% endverbatim %}
                            {% endset %}

                            {% set originalAmount %}
                                {% verbatim %}
                                    {{ attributes.geoInformation.0.geoValues.PseudoPrice }}
                                {% endverbatim %}
                            {% endset %}

                            {% set addAjaxUrl %}
                                {% verbatim %}
                              /de/cart/add-ajax/{{ attributes.IdProductAbstract }}
                            {% endverbatim %}
                            {% endset %}

                            {% set IdProductAbstract %}
                                {% verbatim %}
                                    {{ attributes.IdProductAbstract }}
                                {% endverbatim %}
                            {% endset %}

                            {% set productSku %}
                                {% verbatim %}
                                    {{ attributes.MasterArticleNumber }}
                                {% endverbatim %}
                            {% endset %}

                            {% set uvp %}
                                {% verbatim %}
                                    {{ attributes.geoInformation.0.geoValues.Promotion }}
                                {% endverbatim %}
                            {% endset %}

                            <div class="{{ config.name }}__link">
                            {% if item.type == 'productName' %}
                                <span class="suggestImage">
                                    {% include atom('thumbnail-ff') with {
                                    modifiers: ['catalog', 'with-overlay'],
                                    attributes: {
                                        alt: name,
                                        src: imageUrl,
                                        title: name,
                                        },
                                    } only %}
                                </span>
                            {% endif %}
                                <div class="nameAndMoneyContainer">
                                <div class="suggestBrand">
                                    <span class="col-2 {{ config.name }}__brand">
                                        {% verbatim %}
                                            {{{ attributes.Brand }}}
                                        {% endverbatim %}
                                    </span>

                                    <span class="col">
                                        {% verbatim %}
                                            {{{ name }}}
                                        {% endverbatim %}
                                    </span>
                                </div>
                            {% if item.type == 'productName' %}
                                {% block price %}
                                    <span class="moneyTag">
                                        {% if data.itemWeight is not null -%}
                                            {{ data.calculatedPrice }}
                                        {%- else -%}
                                            {% if originalAmount is not empty and originalAmount > amount -%}
                                                <span class="{{ config.name }}__uvp">{{ uvp }}</span>
                                                <span class="{{ config.name }}__amount {{ config.name }}__amount--original">
                                                    {{ originalAmount }}
                                                </span>
                                            {%- endif -%}

                                            {%- if amount is empty -%}
                                                {{ data.noPriceText }}
                                            {%- else -%}
                                                {% if originalAmount is not empty and originalAmount > amount -%}
                                                    <span class="{{ component.renderClass(config.name ~ '__amount', modifiers) }} {{ config.name }}__amount-red">
                                                        {{ data.prefix }}{{ amount }}
                                                    </span>
                                                {%- else -%}
                                                    <span class="{{ component.renderClass(config.name ~ '__amount', modifiers) }}">
                                                        {{ data.prefix }}{{ amount }}
                                                    </span>
                                                {%- endif -%}
                                            {%- endif -%}
                                        {%- endif -%}
                                    </span>
                                {% endblock %}
                            {% endif %}
                                </div>
                            </div>

                            <button type="button" class="{{ config.name }}__button-suggest-cart" value="{{ productSku | trim }}"  onclick="addToCartItemClick('{{ IdProductAbstract | trim }}','{{ addAjaxUrl | trim }}', '{{ productSku | trim }}', '{{ name | trim }}');event.stopPropagation();">
                                {% include atom('icon') with {
                                    class: 'icon--color-orange',
                                    data: {
                                        name: 'cart',
                                    },
                                } only %}
                            </button>

                        </ff-suggest-item>
                    </div>
                {% endfor %}

                <form class="add-to-cart-ajax" method="POST" name="submit-suggested-search-products" id="submit-suggested-search-product" style="display: none;"
                      action="">
                    <input type="hidden" id="addAjaxUrl" />
                    <input type="hidden" name="is-cart-button-clicked" id="is-cart-button-clicked" value="n" />
                    <input type="hidden" name="data-product-id" id="data-product-id" value="" />
                    <input type="hidden" name="data-product-sku" id="data-product-sku" value="" />
                    <input type="hidden" name="data-product-name" id="data-product-name" value="" />
                    <input type="hidden" name="token" id="token" value="{{ csrf_token('add-to-cart-ajax') }}" />
                </form>
            </section>
        {% endblock %}
    </ff-suggest>
    <button type="button" id="callTs" class="hidden"></button>
    <script>
        function addToCartItemClick(idProductAbstract, addAjaxUrl, productSku, name){
            let addAjaxUrlEl = document.getElementById("addAjaxUrl");
            addAjaxUrlEl.value = addAjaxUrl;

            let productName = document.getElementById("data-product-name");
            productName.value = name;

            let addProductSku = document.getElementById("data-product-sku");
            addProductSku.value = productSku;

            let form = document.getElementById("submit-suggested-search-product");
            form.action = addAjaxUrl;
            let product_id = document.getElementById("data-product-id");
            product_id.value = idProductAbstract;


            document.querySelector("#callTs").click();

            const productSkuFromSuggestWithQuantity = [[productSku, 1, true]];
            if (localStorage.getItem('productItemsForSyncCounter')) {
                let productItemsForSyncCounter = JSON.parse(localStorage.getItem('productItemsForSyncCounter'));

                for (let i = 0; i < productItemsForSyncCounter.length; i++) {
                    if (productItemsForSyncCounter[i][0].includes(productSku)) {
                        productItemsForSyncCounter[i][1]++;
                    }
                }
                if (!JSON.stringify(productItemsForSyncCounter).includes(JSON.stringify(productSkuFromSuggestWithQuantity[0][0]))) {
                    productItemsForSyncCounter.push(productSkuFromSuggestWithQuantity[0]);
                }

                localStorage.setItem('productItemsForSyncCounter', JSON.stringify(productItemsForSyncCounter));
            } else {
                localStorage.setItem('productItemsForSyncCounter', JSON.stringify(productSkuFromSuggestWithQuantity));
            }

            const suggestSearchInput = document.querySelector('.suggest-search__input');
            suggestSearchInput.style.borderTopRightRadius = '24px';
            suggestSearchInput.style.borderBottomRightRadius = '0';
            suggestSearchInput.style.borderLeft = '2px solid #ffa500';
            suggestSearchInput.style.borderTop = '2px solid #ffa500';
            suggestSearchInput.style.borderRight = '2px solid #ffa500';
            suggestSearchInput.style.borderBottom = '0';
        }

        document.getElementsByClassName("suggest-search__input")[0].addEventListener("click", () => {
            if(document.getElementsByClassName("suggest-search__input")[0].value.length > 0){
                document.getElementsByTagName("ff-suggest")[0].classList.add("transitionDisplay");
            }
        })

        document.getElementsByClassName("suggest-search__input")[0].addEventListener("input", () => {
            if(document.getElementsByClassName("suggest-search__input")[0].value.length > 0){
                document.getElementsByTagName("ff-suggest")[0].classList.add("transitionDisplay");
                document.querySelector('.ffw-suggestContainerWrapper').style.borderBottom = '2px solid';
                document.querySelector('.ffw-suggestContainerWrapper').style.borderBottomColor = '#ffa500';
            }else if(document.getElementsByClassName("suggest-search__input")[0].value.length === 0){
                document.getElementsByTagName("ff-suggest")[0].classList.remove("transitionDisplay");
            }
        })
        document.getElementsByClassName("searchbox__clear")[0].addEventListener("click", () => {
            document.getElementsByTagName("ff-suggest")[0].classList.remove("transitionDisplay");
        })
        document.getElementsByTagName("suggest-ff")[0].addEventListener("mouseleave", () => {
            document.getElementsByTagName("ff-suggest")[0].classList.remove("transitionDisplay");
        })
        document.getElementsByTagName("suggest-ff")[0].addEventListener("mouseenter", () => {
            document.getElementsByTagName("ff-suggest")[0].classList.add("transitionDisplay");
        })
        document.getElementsByClassName("search-form")[0].addEventListener("mouseleave", () => {
            document.getElementsByTagName("ff-suggest")[0].classList.remove("transitionDisplay");
        })

        document.getElementsByClassName('searchbox__submit')[0].onclick = () => {
            if (document.getElementsByTagName('ff-suggest')[0].classList.contains("transitionDisplay")){
                document.getElementsByTagName('ff-suggest')[0].classList.remove("transitionDisplay");
            }
        }
        document.addEventListener("keypress", function onSuggestEnterPress(event) {
            if (event.key === "Enter" && document.getElementsByTagName('ff-suggest')[0].classList.contains("transitionDisplay") == true) {
                document.getElementsByTagName('ff-suggest')[0].classList.remove("transitionDisplay");
            }
        });

    </script>
{% endblock %}
