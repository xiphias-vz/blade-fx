{% extends template('page-layout-checkout', 'CheckoutPage') %}

{% define data = {
    isGuest: _view.guestForm.vars.value and (_view.guestForm.vars.value.customer and _view.guestForm.vars.value.customer.isGuest),
    isLogin: _view.loginForm.vars.value and not (_view.guestForm.vars.value and (_view.guestForm.vars.value.customer and _view.guestForm.vars.value.customer.isGuest)),
    currentCodeBucket: app.currentCodeBucket,

    forms: {
        registration: _view.registerForm,
        customer: _view.registerForm.customer,
        guest: _view.guestForm,
        customerGuest: _view.guestForm.customer,
        login: _view.loginForm
    },
    title: 'global.login' | trans,
    scriptSrc: app.customerCDCApiUrl,
    reCaptchaKey: app.reCaptchaSiteKey
} %}
{% block containerContent %}
    <script src="https://code.jquery.com/jquery-latest.min.js"></script>

    {% if data.currentCodeBucket != 'CZ' %}
        <script src="https://www.google.com/recaptcha/api.js?render={{ data.reCaptchaKey }}"></script>
        <script src="{{ data.scriptSrc }}"></script>
    {% endif %}

    <style>
        input:-webkit-autofill,
        input:-webkit-autofill:focus {
            transition: background-color 600000s 0s, color 600000s 0s;
        }

        .gigya-screen-content div.gigya-screen.landscape {
            padding: 0;
        }
        .gigya-screen, .gigya-screen * {
            margin: 0;
            font-family: "Fra Sans", "Open Sans", Arial, "Lucida Grande", sans-serif;
        }
        .gigya-screen .gigya-label-text{
            font-family: "Fra Sans", "Open Sans", Arial, "Lucida Grande", sans-serif;
        }
        .gigya-screen-caption {
            display: none;
        }
        .gigya-screen a
        {
            color: grey !important;
        }
        .globus_register_link
        {
            display: none !important;
        }

        .button--maxLarge {
            width: 100%;
        }

        .stepTitle {
            font-family: "Roboto Thin", sans-serif;
            font-size: 31px;
            font-style: normal;
            font-weight: 500;
            color: #373936;
            line-height: 37px;
            margin: 16px 0;
        }

        .form-desc {
            font-family: "Roboto Thin", sans-serif;
            font-size: 19px;
            font-style: normal;
            font-weight: 400;
            color: #373936;
            line-height: 24px;
            margin: 16px 0 30px;
        }

        .createCustomerTitle {
            font-family: "Roboto Thin", sans-serif;
            font-size: 27px;
            color: #373936;
            margin: 16px 0;
            font-weight: 500;
        }

        .inputGray {
            background-color: #eeefee;
        }

        .customLogin-footer {
            margin-top: 10px;
        }

        .hr-line-solid {
            border-top: 1px solid #b3b0aa;
            margin-top: 52px;
            margin-bottom: 20px;
        }

        .hr-line-solid_passwordForgot {
            border-top: 1px solid #b3b0aa;
            margin-top: 160px;
            margin-bottom: 20px;
        }

        .hintText {
            text-decoration: none;
            font-family: "Roboto Thin", sans-serif;
            font-size: 16px;
            font-weight: 500;
            color: #373936; !important;
            line-height: 19px;
        }

        .helpLink {
            text-decoration: none;
            margin-left: 8px;
            font-family: "Roboto Thin", sans-serif;
            font-size: 16px;
            font-weight: 600;
            color: #373936;
        }

        .icon-hint {
            width: 7px;
            height: 11px;
            vertical-align: baseline;
            margin-right: 8px;
        }

        .linkGlobusAccount {
            color: #373936;
            background-color: transparent;
            cursor: pointer;
        }

        .submitBtn {
            min-width: 18rem !important;
            margin: 2.5rem 0 0.5rem !important;
            clear: both;
        }

        .cancelBtn {
            min-width: 18rem !important;
            margin: 2.5rem 0 0.5rem;
        }

        @media only screen and (max-width: 769px) {
            .cancelBtn {
                margin-top: 0;
            }
        }

        .icon-eye {
            transform: scale(1.3);
            display: block;
        }

        .icon-eyeclosed {
            transform: scale(1.3);
            display: none;
        }

        .icon-check {
            transform: scale(1.7);
            color: #686D66;
            padding-top: 6px;
        }

        #btnLogin {
            margin-left: 10px;
        }

        @media screen and (max-width: 575px) {
            #btnLogin {
                margin-left: 0;
                margin-top: 10px;
            }
        }

        .checkmark {
            top: 0;
            left: 0;
            height: 20px;
            width: 20px;
            background-color: transparent;
            margin-right: 10px;
            border: 1px solid #cdcfcc;
            border-radius: 2px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        input:checked ~ .checkmark {
            background-color: #00622C;
        }

        input:checked ~ .checkmark:hover {
            background-color: #b9dcc3;
        }

        .checkmark:after {
            content: url('data:image/svg+xml; utf8, <svg xmlns="http://www.w3.org/2000/svg" width="12" height="9" viewBox="0 0 12 9" fill="none"><path d="M4 6.78001L1.68667 4.46667C1.42667 4.20667 1.00667 4.20667 0.746666 4.46667C0.486666 4.72667 0.486666 5.14667 0.746666 5.40667L3.53333 8.19334C3.79333 8.45334 4.21333 8.45334 4.47333 8.19334L11.5267 1.14C11.7867 0.880005 11.7867 0.460005 11.5267 0.200005C11.2667 -0.0599951 10.8467 -0.0599951 10.5867 0.200005L4 6.78001Z" fill="white"/></svg>');
            position: absolute;
            display: none;
        }

        input:checked ~ .checkmark:after {
            display: block;
        }

        #customerPasswordDiv, #ForgotPasswordLinkDiv, #btnLogin {
            display: none;
        }

        @media only screen and (max-width: 769px) {
            #checkoutCustomerRegister {
                flex-flow: column;
            }
        }

        #forgotPasswordDiv, #temporarilyLockedOutDiv, #accountDisabledDiv {
            display: none;
        }

        #forgotPasswordMessage, #passwordForgotEmailMessage, #temporarilyLockedOutMessage, #accountDisabledMessage {
            color: #FF3400;
            margin-left: 8px;
        }

        #emailCheckIcon, #startRegister_emailCheckIcon {
            display: none;
            position: absolute;
            bottom: 21px;
            right: 23px;
            width: 25px;
            height: 28px;
            background: transparent;
        }

        #passwordToggleEye {
            display: block;
            position: absolute;
            bottom: 33px;
            right: 28px;
            width: 24px;
            height: 14px;
            background: transparent;
            cursor: pointer;
        }

        #startRegister_passwordToggleEye {
            display: block;
            position: absolute;
            bottom: 14px;
            right: 28px;
            width: 24px;
            background: transparent;
            cursor: pointer;
        }

        #customerEmailDiv,
        #startRegister_customerEmailDiv,
        #customerPasswordDiv,
        #startRegister_customerPasswordDiv {
            position: relative;
        }

        #additionalLoginForm {
            display: none;
        }

        #btnContinueRegistrationAsGuest {
            background-color: transparent;
            border: 2px solid #00622C;
            color: #00622C;
            margin-bottom: 20px;
        }

        #btnContinueRegistrationAsGuest:hover,
        #btnContinueRegistrationAsGuest:active {
             background: #D6FFE8;
             color:  #00622C;
        }

        #btnContinueRegistrationAsGuest:focus {
            outline-style: solid;
            outline-width: 1px;
            outline-color: #FFA500;
            outline-offset: 2px;
        }

        #startRegister_passwordCheckBoxes {
            display: none;
        }

        #hiddenGuestForm {
            display: none;
        }

        .btnContainer {
            display: flex;
            padding-top: 20px;
        }

        @media screen and (max-width: 575px) {
            .btnContainer {
                flex-direction: column-reverse;
            }
        }

        #btnCancelLogin {
            text-decoration: none;
        }

        @media screen and (max-width: 575px) {
            #btnCancelLogin {
                margin-top: 10px;
            }
        }

        #btnCheckMailOrCard {
            margin-left: 10px;
        }

        @media screen and (max-width: 575px) {
            #btnCheckMailOrCard {
                margin-left: 0;
            }
        }

        #btnContinueRegistration {
            margin-left: 10px;
        }

        @media screen and (max-width: 575px) {
            #btnContinueRegistration {
                margin-left: 0;
                margin-top: 10px;
            }
        }

        #btnContinueRegistration, #btnContinueRegistrationAsGuest, #btnCancelLogin, #btnCheckMailOrCard, #btnBackToLogin  {
            cursor: pointer;
        }

        #passwordCheckBoxes_digit, #passwordCheckBoxes_length, #passwordCheckBoxes_letter, #passwordCheckBoxes_specChar {
            display: none;
        }

        #btnBackToLogin {
            margin-top: 10px;
        }

        input[type='checkbox'] {
            appearance: none;
        }

        #link-to-address-modal{
            float: right;
        }

        @media screen and (max-width: 768px) {
            .register-form-tablet-width {
                width: 96%;
            }
        }

        .form--checkout-actions {
            width: 100%;
        }

        #passwordForgotEmail, #customLoginFormEmail {
            height: 40px;
            padding: 10px;
        }

        .validation-success {
            background-color: #B8DCC3;
        }

        .validation-invalid {
            background-color: #cb3d49;
            border-radius: 24px;
            font-family: "Roboto Thin", sans-serif;
            color: #373936;
            font-weight: 600;
        }

        #passwordForgotEmailMessage, #customLoginFormEmailMessage {
            color: black;
        }

        .password-checkbox-label {
            margin-top: 24px;
        }

        .password-checkbox {
            display: inline-flex;
            font-size: 0.9rem;
            font-weight: 400;
        }

        .checkbox-wrapper {
            display: grid;
            grid-template-columns: 1fr 1fr;
            padding: 8px 14px;
            row-gap: 14px;
        }

        @media only screen and (max-width: 575px) {
            .checkbox-wrapper {
                grid-template-columns: auto;
            }
        }

        input[type='checkbox'] {
            appearance: auto;
            accent-color: #00622C;
            width: 20px;
            height: 20px;
            margin-right: 0.5rem;
        }

        input[type='checkbox']:checked:after {
            content: "";
        }

        #loginAPI {
            padding: 0 2px;
        }

        #additionalLoginForm, #passwordForgotFormDiv {
            padding: 0 10%;
        }

        @media only screen and (max-width: 991px) {
             #additionalLoginForm, #passwordForgotFormDiv{
                padding: unset;
            }
        }

        .registrationLeftSideDiv {
            margin-top: 24px;
        }

        .registrationRightSideDiv {
            background-color: #EEEFEE;
            padding: 24px;
            margin-top: 24px;
        }

        @media screen and (min-width: 769px) {
            .registrationLeftSideDiv {
                width: 49%;
            }
            .registrationCenterDiv {
                width: 2%;
            }
            .registrationRightSideDiv {
                background-color: #EEEFEE;
                padding: 24px;
                float: right;
                width: 49%;
            }
        }
    </style>

    {% if data.currentCodeBucket == 'CZ' %}
        <div class="grid grid--center">
            <div class="col col--sm-12 col--md-9 col--xl-6 register-form-tablet-width">
                <div class="box box--checkout">
                    {% block titleCZ %}
                        <div class="list-switches list-switches--checkout">
                            <ul class="list-switches__list list-switches--register-type">
                                <li class="list-switches__item">
                                    {% include molecule('toggler-radio') with {
                                        modifiers: ['checkout', 'with-bg'],
                                        data: {
                                            label: 'checkout.customer.auth_as_user' | trans,
                                        },
                                        attributes: {
                                            id: 'register',
                                            checked: not data.isGuest and not data.isLogin,
                                            name: 'checkoutProceedAs',
                                            'target-class-name': 'js-login__register',
                                        },
                                    } only %}
                                </li>
                                <li class="list-switches__item">
                                    {% include molecule('toggler-radio') with {
                                        modifiers: ['checkout', 'with-bg'],
                                        data: {
                                            label: 'checkout.customer.auth_as_login' | trans
                                        },
                                        attributes: {
                                            id: 'login',
                                            checked: data.isLogin,
                                            name: 'checkoutProceedAs',
                                            'target-class-name': 'js-login__login',
                                        },
                                    } only %}
                                </li>
                                <li class="list-switches__item">
                                    {% embed molecule('toggler-radio') with {
                                        modifiers: ['checkout', 'with-bg'],
                                        data: {
                                            label: 'checkout.customer.auth_as_guest' | trans
                                        },
                                        attributes: {
                                            id: 'guest',
                                            checked: data.isGuest,
                                            name: 'checkoutProceedAs',
                                            'target-class-name': 'js-login__guest',
                                        },
                                    } only %}
                                        {% block labelContainerCZ %}
                                            {{ parent() }}
                                        {% endblock %}
                                    {% endembed %}
                                </li>
                            </ul>
                        </div>
                    {% endblock %}

                    {% block contentCZ %}
                        <div class="register-form js-login__register is-hidden">
                            <div style="text-align: center">
                                {% if app.currentCodeBucket == 'DE' %}
                                    <a target="_blank" href="https://www.globusbonus.cz/prihlaseni/registrace" class="col--middle button button--expand-tablet button--large">
                                        {{ 'checkout.customer.auth_as_user' | trans }}
                                    </a>
                                {% else %}
                                    <a target="_blank" href="https://www.globusbonus.cz/prihlaseni/registrace" class="col--middle button button--expand-tablet button--large button--font-CZ button--backgroundcolor-CZ">
                                        {{ 'checkout.customer.auth_as_user' | trans }}
                                    </a>
                                {% endif %}
                            </div>
                        </div>
                        {% embed molecule('form') with {
                            class: 'js-login__login' ~ (data.isLogin ? '' : ' is-hidden'),
                            modifiers: ['login', 'checkout-actions', 'grid-sm-indent'],
                            data: {
                                form: data.forms.login,
                                layout: {
                                    email: 'col col--sm-12',
                                    password: 'col col--sm-12',
                                },
                                submit: {
                                    enable: true,
                                    text: 'forms.submit.login' | trans,
                                    class: app.currentCodeBucket == 'DE' ? 'form__action--checkout col col--middle button button--expand-tablet button--large' : 'form__action--checkout col col--middle button button--expand-tablet button--large button--font-CZ button--backgroundcolor-CZ',
                                },
                                cancel: {
                                    enable: true,
                                },
                            },
                        } only %}
                            {% block cancel %}
                                <a target="_blank" href="https://www.globusbonus.cz/prihlaseni/zapomenute-heslo" class="col col--middle link link--login-forgot-password" {{qa('customer-forgot-password-link')}}>
                                    {{ 'forms.forgot-password' | trans~'?' }}
                                </a>
                            {% endblock %}
                        {% endembed %}

                        {% embed molecule('form') with {
                            class: 'register-form js-login__guest' ~ (data.isGuest ? '' : ' is-hidden'),
                            modifiers: ['login', 'checkout-actions'],
                            data: {
                                form: data.forms.guest,
                                submit: {
                                    enable: true,
                                    text: 'checkout.customer.submit_as_guest' | trans,
                                    class: app.currentCodeBucket == 'DE' ? 'col col--middle button button--expand-tablet button--large' : 'col col--middle button button--expand-tablet button--large button--font-CZ button--backgroundcolor-CZ',
                                }
                            },
                            embed: {
                                forms: {
                                    customerGuest: data.forms.customerGuest
                                }
                            }
                        } only %}
                            {% block fields %}
                                {% include molecule('form') with {
                                    modifiers: ['login', 'checkout-actions', 'grid-indent'],
                                    data: {
                                        class: 'col col--sm-6',
                                        form: embed.forms.customerGuest,
                                        enableStart: false,
                                        enableEnd: false,
                                        submit: {
                                            enable: false
                                        },
                                        cancel: {
                                            enable: false
                                        }
                                    }
                                } only %}
                            {% endblock %}
                        {% endembed %}
                    {% endblock %}
                </div>
            </div>
        </div>

        <script>
            const emailFieldGuest = document.querySelector('#guestForm_customer_email');
            emailFieldGuest.parentElement.classList.add('col', 'col--sm-12');
        </script>
    {% endif %}

    {% if data.currentCodeBucket=='DE' %}
        <div class="grid grid--center">
            <div class="col col--sm-12 col--md-9 col--xl-12 register-form-tablet-width">
                <div style="position: relative; box-shadow: unset;">

                    {% block content_DE %}

                        <div id="additionalLoginForm" class="form form--login form--checkout-actions">
                            <h2 class="createCustomerTitle">{{ 'checkout.step.customer.login.create_customer_title' | trans }}</h2>
                            <form name="startRegistrationForm" method="post" novalidate="novalidate">
                                <div class="form__container">
                                    <div class="form__fields grid grid--top">
                                        <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                            <div class="form__container">
                                                <div id="startRegister_customerEmailDiv" class="form__fields grid grid--top">
                                                    <div class="form__field col col--sm-12">
                                                        <label for="startRegistrationForm_customer_email" class="label label--required">{{ 'checkout.step.customer.login.emailField.labelCreate' | trans }}</label>
                                                        <input id="startRegistrationForm_customer_email" name="startRegistrationForm[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholderCreate' | trans }}" class="input input--expand inputGray" type="email" >
                                                        <span id="startRegister_emailCheckIcon">
                                                            {% include atom('icon') with {
                                                                class: 'check-codex',
                                                                data: {
                                                                    name: 'check-codex',
                                                                },
                                                            } only %}
                                                        </span>
                                                    </div>
                                                </div>
                                                <div id="startRegister_customerPasswordDiv" class="form__fields grid grid--top">
                                                    <div class="form__field col col--sm-12" style="padding-bottom: 0 !important;">
                                                        <label for="startRegister__customer_password" class="label label--required">{{ 'auth.password' | trans }}</label>
                                                        <input id="startRegister__customer_password" name="startRegistrationForm[customer][password]" required="required" placeholder="{{ 'customer.login.password_placeholder' | trans }}" class="input input--expand inputGray" type="password" >
                                                        <button type="button" id="startRegister_passwordToggleEye">
                                                            {% include atom('icon') with {
                                                                class: 'icon-eye',
                                                                data: {
                                                                    name: 'eye-codex',
                                                                },
                                                            } only %}
                                                            {% include atom('icon') with {
                                                                id: 'iconEyeclosed',
                                                                class: 'icon-eyeclosed',
                                                                data: {
                                                                    name: 'eyeclosed-codex',
                                                                },
                                                            } only %}
                                                        </button>
                                                    </div>
                                                </div>
                                                <div id="startRegister_passwordCheckBoxes" class="form__fields grid grid--top">
                                                    <div class="form__field col col--sm-12">
                                                        <label for="passwordCheckBoxes" class="label password-checkbox-label">{{ 'register.page.password.checkboxes.label' | trans}}</label>
                                                        <div class="checkbox-wrapper">
                                                            <div class="password-checkbox">
                                                                <input id="passwordCheckBoxes_length" class='myCheckbox' type="checkbox">
                                                                <span class="checkmark"></span>
                                                                <label for="passwordCheckBoxes_length" class="">{{ 'register.page.password.check.length' | trans }}</label>
                                                            </div>
                                                            <div class="password-checkbox">
                                                                <input id="passwordCheckBoxes_specChar" class='myCheckbox' type="checkbox">
                                                                <span class="checkmark"></span>
                                                                <label for="passwordCheckBoxes_specChar" class="">{{ 'register.page.password.check.spec.char' | trans }}</label>
                                                            </div>
                                                            <div class="password-checkbox">
                                                                <input id="passwordCheckBoxes_digit" class='myCheckbox' type="checkbox">
                                                                <span class="checkmark"></span>
                                                                <label for="passwordCheckBoxes_digit" class="" >{{ 'register.page.password.check.digit' | trans }}</label>
                                                            </div>
                                                            <div class="password-checkbox">
                                                                <input id="passwordCheckBoxes_letter" class='myCheckbox' type="checkbox">
                                                                <span class="checkmark"></span>
                                                                <label for="passwordCheckBoxes_letter" class="">{{ 'register.page.password.check.letter' | trans }}</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="btnContainer">
                                        <button id="btnCancelLogin" type="button" class="button button--hollow-ghost button--expand col col--middle">{{ 'general.cancel.button' | trans }}</button>
                                        <button id="btnContinueRegistration" type="button" class="form__action col col--middle button button--expand-tablet button--maxLarge" disabled>{{ 'general.next.button' | trans }}</button>
                                    </div>

                                    <div class="customLogin-footer">
                                        <button id="btnContinueRegistrationAsGuest" type="button" class="button button--expand-tablet button--maxLarge ">{{ 'checkout.customer.auth_as_guest' | trans }}</button>
                                    </div>

                                    <div class="hr-line-solid"></div>

                                    <p id="basicHelpText" class="hintText"><svg class="icon icon-hint"><use xlink:href="#:chevron-right"></use></svg><a href="https://globus.zendesk.com/hc/de" class="hintText" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                                </div>
                            </form>
                        </div>

                        <div id="loginAPI" class="form form--login form--checkout-actions register-form {{ data.isLogin ? '' : 'is-hidden' }}">
                            <h2 class="stepTitle">{{ 'global.login' | trans }}</h2>
                            <p class="form-desc">{{ 'checkout.step.customer.desc.form' | trans }}</p>
                            <form name="customLoginForm" method="post" novalidate="novalidate">
                                <div class="form__container">
                                <div class="form__fields grid grid--top">
                                    <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                        <div class="form__container">
                                            <div id="customerEmailDiv" class="form__fields grid grid--top">
                                                <div class="form__field col col--sm-12">
                                                    <label for="customLoginForm_customer_email" class="label label--required">{{ 'checkout.step.customer.login.emailField.label' | trans }}</label>
                                                    <input id="customLoginForm_customer_email" name="customLoginForm[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholder' | trans }}" class="input input--expand inputGray" type="email" >
                                                    <span id="emailCheckIcon">
                                                        {% include atom('icon') with {
                                                            class: 'check-codex',
                                                            data: {
                                                                name: 'check-codex',
                                                            },
                                                        } only %}
                                                    </span>
                                                </div>
                                            </div>
                                            <div id="customerPasswordDiv" class="form__fields grid grid--top" >
                                                <div class="form__field col col--sm-12">
                                                    <label for="customLoginForm_customer_password" class="label label--required">{{ 'auth.password' | trans }}</label>
                                                    <input id="customLoginForm_customer_password" name="customLoginForm[customer][password]" placeholder="{{ 'customer.login.password_placeholder' | trans }}" class="input input--expand inputGray" type="password" >
                                                    <button type="button" id="passwordToggleEye">
                                                        {% include atom('icon') with {
                                                            id: 'iconEye',
                                                            class: 'icon-eye',
                                                            data: {
                                                                name: 'eye-codex',
                                                            },
                                                        } only %}
                                                        {% include atom('icon') with {
                                                            id: 'iconEyeclosed',
                                                            class: 'icon-eyeclosed',
                                                            data: {
                                                                name: 'eyeclosed-codex',
                                                            },
                                                        } only %}
                                                    </button>
                                                </div>
                                            </div>
                                            <div id="customLoginFormEmail" class="is-hidden">
                                                <span id="customLoginFormEmailMessage"></span>
                                            </div>
                                            <div id="forgotPasswordDiv">
                                                <div id="forgotPasswordMessage">{{ 'checkout.step.customer.login.invalidPassword' | trans }}</div>
                                                <input id="captchaGeneratedToken" type="hidden" />
                                            </div>
                                            <div id="temporarilyLockedOutDiv">
                                                <span id="temporarilyLockedOutMessage">{{ 'checkout.step.customer.login.accountTemporarilyLockedOut' | trans }}</span>
                                                <input id="captchaGeneratedToken" type="hidden" />
                                            </div>
                                            <div id="accountDisabledDiv">
                                                <span id="accountDisabledMessage">{{ 'checkout.step.customer.login.accountDisabled' | trans }}</span>
                                                <input id="captchaGeneratedToken" type="hidden" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="ForgotPasswordLinkDiv" onclick="showForgotPassword()">
                                    <a class="helpLink"  href="#">{{ 'global.recover.password' | trans }}?</a>
                                </div>

                                <div class="btnContainer">
                                    <button id="btnCancelLogin" onclick="cancelLogin()" type="button" class="button button--hollow-ghost button--expand col col--middle">
                                        {{ 'general.cancel.button' | trans }}
                                    </button>
                                    <button id="btnCheckMailOrCard" type="button" class="form__action col col--middle button button--expand" data-qa="submit-button">
                                        {{ 'general.next.button' | trans }}
                                    </button>
                                    <button id="btnLogin" type="button" class="form__action col col--middle button button--expand button--expand-tablet">
                                        {{ 'general.next.button' | trans }}
                                    </button>
                                </div>

                            </div>
                            </form>

                            <div class="hr-line-solid"></div>

                            <p id="basicHelpText" class="hintText"><svg class="icon icon-hint"><use xlink:href="#:chevron-right"></use></svg><a class="hintText" href="https://globus.zendesk.com/hc/de" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                            <p id="newUserHelpText" class="hintText"><svg class="icon icon-hint"><use xlink:href="#:chevron-right"></use></svg>{{ 'checkout.step.customer.login.new_user_text' | trans }} <a id="btnRegisterUser" class="hintText linkGlobusAccount">{{ 'checkout.step.customer.login.globus_account_text' | trans }}.</a></p>

                        </div>

                        <div id="checkoutCustomerRegister" class="register-form js-login__register{{ (data.isGuest or data.isLogin? ' is-hidden' : '') }}">
                            <div class="registrationLeftSideDiv">
                                {% embed molecule('register-page-left-side') only %}
                                {% endembed %}
                            </div>
                            <div class="registrationCenterDiv">
                            </div>
                            <div class="registrationRightSideDiv">
                                {% embed molecule('form-register') with {
                                    class: 'register-form js-login__register',
                                    modifiers: ['checkout-actions'],
                                    data: {
                                        form: data.forms.registration,
                                        submit: {
                                            enable: false,
                                            text: 'checkout.customer.auth_as_user' | trans,
                                            class: 'form__action--checkout col col--middle button button--expand-tablet button--large',
                                        },
                                    },
                                    embed: {
                                        forms: {
                                            customer: data.forms.customer,
                                        },
                                    },
                                    qa: 'register-form'
                                } only %}
                                    {% block fields %}
                                        {% include molecule('customer-confirmation-form', 'CustomerConfirmationPage') ignore missing with {
                                            modifiers: ['checkout-actions', 'grid-sm-indent'],
                                            data: {
                                                form: embed.forms.customer,
                                                isSubmitEnabled: false,
                                                enableStart: false,
                                                enableEnd: false,
                                            },
                                        } only %}
                                    {% endblock %}
                                {% endembed %}
                                {% embed molecule('popup-ui-address-validation') with {
                                } only %}
                                {% endembed %}
                            </div>
                        </div>
                        <span id="errorMessageAboveSubmitButton"></span>

                        <div id="customerRegistrationFormButtons" class="{{ (data.isGuest or data.isLogin? ' is-hidden' : '') }}">
                            {% block submitButton %}
                                <button type="button" id="link-to-address-modal" class="form__action form__action--checkout col col--middle button button--expand-tablet submitBtn">
                                    {{'checkout.customer.submit_as_guest' | trans}}
                                </button>
                            {% endblock %}
                            {% block CancelRegisterButton %}
                                <div>
                                    <button id="btnCancelRegister" type="button" class="form__action form__action--checkout col col--middle button button--hollow-ghost button--expand-tablet cancelBtn">{{ 'general.cancel.button' | trans }}</button>
                                </div>
                            {% endblock %}
                        </div>

                        <div style="display: none">

                                {% embed molecule('form') with {
                                    class: 'js-login__login' ~ (data.isLogin ? '' : ' is-hidden'),
                                    modifiers: ['login', 'checkout-actions', 'grid-sm-indent'],
                                    data: {
                                    form: data.forms.login,
                                    layout: {
                                        email: 'col col--sm-12',
                                        password: 'col col--sm-12',
                                    },
                                    submit: {
                                        enable: true,
                                        text: 'forms.submit.login' | trans,
                                        class: 'form__action--checkout col col--middle button button--expand-tablet button--large',
                                    },
                                    cancel: {
                                        enable: true,
                                    },
                                },
                                    } only %}
                                {% endembed %}

                        </div>

                        <div id="hiddenGuestForm">
                            {% embed molecule('form') with {
                                class: 'register-form js-login__guest' ~ (data.isGuest ? '' : ' is-hidden'),
                                modifiers: ['login', 'checkout-actions'],
                                data: {
                                    form: data.forms.guest,
                                    submit: {
                                        enable: true,
                                        text: 'checkout.customer.submit_as_guest' | trans,
                                        class: 'col col--middle button button--expand-tablet button--large'
                                    }
                                },
                                embed: {
                                    forms: {
                                        customerGuest: data.forms.customerGuest
                                    }
                                }
                            } only %}
                                {% block fields %}
                                    {% include molecule('form') with {
                                        modifiers: ['login', 'checkout-actions', 'grid-indent'],
                                        data: {
                                            class: 'col col--sm-6',
                                            form: embed.forms.customerGuest,
                                            enableStart: false,
                                            enableEnd: false,
                                            submit: {
                                                enable: false
                                            },
                                            cancel: {
                                                enable: false
                                            }
                                        }
                                    } only %}
                                {% endblock %}
                            {% endembed %}
                        </div>

                        <div id="passwordForgotFormDiv" class="form form--login form--checkout-actions register-form is-hidden">
                            <h2 class="stepTitle">{{ 'forget.password' | trans }}</h2>
                            <form name="passwordForgotForm" method="post" novalidate="novalidate">
                                <div class="form__container">
                                    <div class="form__fields grid grid--top">
                                        <div class="form form--login form--checkout-actions form--grid-indent" data-qa="component form">
                                            <div class="form__container">
                                                <div id="passwordForgotEmailDiv" class="form__fields grid grid--top">
                                                    <div class="form__field col col--sm-12">
                                                        <p class="form-desc">{{ 'enter.your.email.address.for.reset.password.title.1' | trans }}, {{ 'enter.your.email.address.for.reset.password.title.2' | trans }}:</p>
                                                        <label for="txt_email_or_card_for_pass_reset" class="label label--required">{{ 'checkout.step.customer.login.emailField.label' | trans }}</label>
                                                        <input id="txt_email_or_card_for_pass_reset" name="forgotPassForms[customer][email]" required="required" placeholder="{{ 'checkout.step.customer.login.emailField.placeholder' | trans }}" class="input input--expand" type="email" >
                                                    </div>
                                                </div>
                                                <div id="passwordForgotEmail" class="is-hidden">
                                                    <span id="passwordForgotEmailMessage"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="">
                                        <button id="btnCallForgotPasswordApi" type="button" class="col col--middle button button--expand-tablet button--maxLarge" data-qa="submit-button">
                                            {{ 'send' | trans }}
                                        </button>
                                        <button id="btnLogin" type="button" class="form__action col col--middle button button--expand-tablet button--maxLarge">{{ 'general.next.button' | trans }}</button>
                                    </div>
                                </div>
                            </form>
                            <div class="customLogin-footer">
                                <a id="btnBackToLogin" onclick="backToLoginForm()" type="button" class="button button--hollow-ghost button--expand col col--middle">{{ 'return.sign.in' | trans }}</a>
                            </div>

                            <div class="hr-line-solid_passwordForgot"></div>

                            <p id="basicHelpText" class="hintText"><svg class="icon icon-hint"><use xlink:href="#:chevron-right"></use></svg><a class="hintText" href="https://globus.zendesk.com/hc/de" target="_blank">{{ 'checkout.step.customer.login.help_text' | trans }}</a></p>
                            <p id="newUserHelpText" class="hintText"><svg class="icon icon-hint"><use xlink:href="#:chevron-right"></use></svg>{{ 'checkout.step.customer.login.new_user_text' | trans }} <a id="lnkRegisterUser" class="hintText linkGlobusAccount" href="/register">{{ 'checkout.step.customer.login.globus_account_text' | trans }}</a></p>

                        </div>

                   {% endblock %}
                </div>
            </div>
        </div>

        <script type="text/javascript">

            let loginForm = $("#loginAPI");
            if(loginForm[0].classList.contains('is-hidden')) {
                if (window.matchMedia('(min-width: 769px)').matches) {
                    $("#checkoutCustomerRegister").css("display", "flex");
                } else {
                    $("#checkoutCustomerRegister").css("display", "block");
                }
            }

            function showForgotPassword() {
                $("#loginAPI").css("display", "none");
                $("#passwordForgotFormDiv").removeClass("is-hidden");
            }

            function backToLoginForm() {
                $("#passwordForgotFormDiv").addClass("is-hidden");
                $("#customerPasswordDiv").css("display", "block");
                $("#ForgotPasswordLinkDiv").css("display", "block");
                $("#newUserHelpText").css("display", "none");
                $('#btnCheckMailOrCard').css("display", "none");
                $("#btnLogin").css("display", "block");
                $("#emailCheckIcon").css("display", "block");
                $("#loginAPI").css("display", "block");
                $("#passwordForgotEmail").remove();
            }

            function cancelLogin() {
                localStorage.setItem('cancelLogin', "true");
                location.reload();
            }

            $(document).ready(function () {
                let passwordField = document.querySelector('#customLoginForm_customer_password');
                let isLoginCancelled = localStorage.getItem('cancelLogin');
                if(isLoginCancelled === "true") {
                    passwordField.setAttribute('autocomplete', 'new-password');
                } else {
                    passwordField.removeAttribute('autocomplete');
                }
            })

            function checkoutStep(option)
            {
                window.dataLayer.push({
                    'event': 'eec.checkout',
                    'ecommerce':
                        {
                            'checkout':
                                {
                                    'actionField':
                                        {
                                            'step': '1',
                                            'option': option,
                                        }
                                },
                        },
                });
            }


        var emailField = $('#startRegistrationForm_customer_email');
        var passField = $('#startRegister__customer_password');
        var regGlobalEmail = /^\S+@\S+$/;
        var regGlobalPass = /^(?=.*\d)(?=.*[a-zA-Z])(?=.*\W)(?!.*\s).{8,}$/;

        var btnCheck = document.getElementById('btnCheckMailOrCard');
        if(btnCheck != null)
        {
            btnCheck.addEventListener('click', function()
            {
               var emailOrCardNumber = $("#customLoginForm_customer_email").val();
               const url = "/login/check-availability"

                if(emailOrCardNumber != ""){
                    $("#customLoginFormEmail").addClass("is-hidden");
                    $("#customLoginFormEmail").removeClass("validation-invalid");
                    $("#customLoginFormEmailMessage").text("");
                    $.ajax(url, {
                        type: 'POST',  // http method
                        data: { id: emailOrCardNumber },  // data to submit
                        success: function (data, status, xhr) {
                            let response = JSON.parse(data);
                            if(response.isAvailable === true){
                                $("#loginAPI").css("display", "none");
                                $("#additionalLoginForm").css("display", "block");

                                $("#startRegistrationForm_customer_email").val(emailOrCardNumber);
                            }
                            else
                            {
                                $("#customerPasswordDiv").css("display", "block");
                                $("#ForgotPasswordLinkDiv").css("display", "block");
                                $("#newUserHelpText").css("display", "none");
                                $('#btnCheckMailOrCard').css("display", "none");
                                $("#btnLogin").css("display", "block");
                                $("#emailCheckIcon").css("display", "block");
                            }
                        },
                        error: function (jqXhr, textStatus, errorMessage) {
                        }
                    });
                }
                else {
                    $("#customLoginFormEmail").removeClass("is-hidden");
                    $("#customLoginFormEmail").addClass("validation-invalid");
                    $("#customLoginFormEmailMessage").text("{{ 'validation.not_blank' | trans }}");
                    return false;
                }
            });
        }

        $("#btnLogin").click(function()
        {
            var emailOrCardNumber = $("#customLoginForm_customer_email").val();
            var password = $("#customLoginForm_customer_password").val();
            var captchaGeneratedToken = $("#captchaGeneratedToken").val();
            const loginUrl = '/login/globus-login';

            $.ajax(loginUrl, {
                type: 'POST',  // http method
                data: { id: emailOrCardNumber, password: password, captchaToken: captchaGeneratedToken  },  // data to submit
                success: function (data, status, xhr) {
                    var response = JSON.parse(data);

                    if(response["successfullyLoggedIn"] === true){
                        checkoutStep('login');
                        document.querySelector("#loginForm_email.input").value = emailOrCardNumber;
                        document.querySelector("#loginForm_password.input").value = password
                        document.querySelector("#loginForm_data").value = JSON.stringify(response);
                        document.getElementsByName("loginForm")[0].submit();
                        localStorage.setItem('cancelLogin', 'false');

                    } else {
                        $("#customLoginForm_customer_password").css("border", "1px solid red");
                        switch (response.message) {
                            case "Account temporarily locked out":
                                $("#temporarilyLockedOutDiv").css("display", "block");
                                break;
                            case "Account Disabled":
                                $("#accountDisabledDiv").css("display", "block");
                                break;
                            default:
                                $("#forgotPasswordDiv").css("display", "block");
                        }

                        if(response["showCaptcha"] === true){
                            grecaptcha.ready(function() {
                                grecaptcha.execute('{{ data.reCaptchaKey }}', {action: 'login'}).then(function(token) {
                                    $("#captchaGeneratedToken").val(token);
                                });
                            });
                        }
                    }
                },
                error: function (jqXhr, textStatus, errorMessage) {
                }
            });
        });

        $("#btnCancelLogin").click(function(){
            window.location.reload();
        });

        $("#btnCancelRegister").click(function(){
            $("#loginAPI").css("display", "block");
            $("#checkoutCustomerRegister").css("display", "none");
            $("#additionalLoginForm").css("display", "none");
            $("#customerRegistrationFormButtons").css("display", "none");
            $("#checkoutCustomerRegister").trigger('reset');
            window.history.replaceState( null, null, window.location.href );
            window.scroll({
                top: 0,
                left: 0,
                behavior: 'auto'
            });
        });

        $("#passwordToggleEye").click(function(){
            var el = $("#customLoginForm_customer_password")[0];
            if(el.type === "password"){
                el.type = "text";
                $(".icon-eye").css('display', 'none');
                $(".icon-eyeclosed").css('display', 'block');
            }
            else
            {
                el.type = "password";
                $(".icon-eye").css('display', 'block');
                $(".icon-eyeclosed").css('display', 'none');
            }
        });

        $("#startRegister_passwordToggleEye").click(function(){
            var el = $("#startRegister__customer_password")[0];
            if(el.type === "password"){
                el.type = "text";
                $(".icon-eye").css('display', 'none');
                $(".icon-eyeclosed").css('display', 'block');
            }
            else
            {
                el.type = "password";
                $(".icon-eye").css('display', 'block');
                $(".icon-eyeclosed").css('display', 'none');
            }
        });

        $("#startRegistrationForm_customer_email").on('input', function(ev) {
            let pass = ev.currentTarget.value;
            let password = passField.val();

            var reg = /^\S+@\S+$/;
            if (reg.test(pass) && regGlobalPass.test(password)) {
                $("#btnContinueRegistration").removeAttr("disabled");
            }
            else {
                $("#startRegistrationForm_customer_email").css("border", "2px solid red");
                $("#btnContinueRegistration").prop("disabled", "true");
            }
        });

        $("#startRegister__customer_password").on('input', function(ev){
            let pass = ev.currentTarget.value;
            let email = emailField.val();

            $("#startRegister_passwordCheckBoxes").css("display", "block");
            if(pass.length > 8){
                $("#passwordCheckBoxes_length").prop("checked", "true");
            }
            else {
                $("#passwordCheckBoxes_length").removeAttr("checked");
            }

            let regSpecialChars = /\W/;
            if(regSpecialChars.test(pass)){
                $("#passwordCheckBoxes_specChar").prop("checked", "true");
            }
            else {
                $("#passwordCheckBoxes_specChar").removeAttr("checked");
            }

            let regDigits = /\d/;
            if(regDigits.test(pass)){
                $("#passwordCheckBoxes_digit").prop("checked", "true");
            }
            else {
                $("#passwordCheckBoxes_digit").removeAttr("checked");
            }

            let regLetters = /[a-zA-Z]/;
            if(regLetters.test(pass)){
                $("#passwordCheckBoxes_letter").prop("checked", "true");
            }
            else {
                $("#passwordCheckBoxes_letter").removeAttr("checked");
            }

            var regPass = /^(?=.*\d)(?=.*[a-zA-Z])(?=.*\W)(?!.*\s).{8,}$/;
            if (regPass.test(pass) && regGlobalEmail.test(email)) {
                $("#btnContinueRegistration").removeAttr("disabled");
            }
            else {
                $("#startRegister__customer_password").css("border", "2px solid red");
                $("#btnContinueRegistration").prop("disabled", "true");
            }

        });

        $("#btnContinueRegistration").click(function(){
            $("#checkoutCustomerRegister").css("display", "flex");
            $("#additionalLoginForm").css("display", "none");
            $("#customerRegistrationFormButtons").css("display", "block");
            $("#registerForm_customer_email").val($("#startRegistrationForm_customer_email").val());
            $("#registerForm_customer_password_pass").val($("#startRegister__customer_password").val());
            $("#registerForm_customer_password_confirm").val($("#startRegister__customer_password").val());
        });

        $("#btnContinueRegistrationAsGuest").click(function(){
            checkoutStep('guestCheckout');
            $("#guestForm_customer_email").val($("#startRegistrationForm_customer_email").val());
            document.getElementsByName("guestForm")[0].submit();
        });

        $("#btnRegisterUser").click(function(){
            checkoutStep('register');
            $("#loginAPI").css("display", "none");
            $("#additionalLoginForm").css("display", "block");
        });

        $("#lnkRegisterUser").click(function(){
            checkoutStep('register');
        });

        $("#btnCallForgotPasswordApi").click(function(){
            const url = '/password/reset';
            var emailOrKundenkartenummer = $("#txt_email_or_card_for_pass_reset").val();
            if(emailOrKundenkartenummer === ""){
                showErrorBox("{{ 'validation.not_blank' | trans }}");
                return false;
            }

            $.ajax(url, {
                type: 'POST',
                dataType: 'json',
                data: {
                    id: emailOrKundenkartenummer
                },
                success(data, status, xhr) {
                    showSuccessBox("{{ 'checkout.validation.mailSentMsg' | trans }}");
                },
                error(jqXhr, textStatus, errorMessage) {
                    showErrorBox("Error");
                },
            });
        });

        function showSuccessBox(message){
            $("#passwordForgotEmail").removeClass("is-hidden");
            $("#passwordForgotEmail").addClass("validation-success");
            $("#passwordForgotEmailMessage").text(message);
        }

        function showErrorBox(message){
            $("#passwordForgotEmail").removeClass("is-hidden");
            $("#passwordForgotEmail").addClass("validation-invalid");
            $("#passwordForgotEmailMessage").text(message);
        }

        </script>

    {% endif %}

{% endblock %}
