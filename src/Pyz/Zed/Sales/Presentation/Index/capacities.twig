{% extends '@Gui/layout/layout.twig' %}

{% set widget_title = 'Capacity management' | trans %}

{% block head_title widget_title %}
{% block section_title widget_title %}

{% block action %}
{% endblock %}

{% block content %}
    <style>
        .btn-customPrimary {
            background-color: #1ab394;
            border-color: #1ab394;
            color: #FFFFFF;
            border-radius: unset;
            margin-left: 10px;
        }

        .btn-invertedPrimary {
            background-color: #FFF;
            border-color: #1ab394;
            color: #1ab394;
            border-radius: unset;
            margin-right: 10px;
        }

        #cmbStores {
            width: 130px;
            height: 35px;
        }

        #btnFilterByPickzone, #btnResetDefaultFilter {
            margin-left: 10px;
            min-width: 50px;
            height: 35px;
            margin-top: 23px;
        }

        table {
            width: 50%;
            margin-bottom: 20px;
        }

        thead {
            background-color: #333333;
            color: white;
        }

        th {
            max-width: 60px;
        }

        th, td {
            padding: 8px !important;
        }

        .ts-table-info-row {
            background-color: #dedede;
            color: black;
        }

        .ts-table-sum-row {
            background-color: #c1e1ca;
            color: black;
        }

        .btn-custom-cancel {
            background-color: #ed5565;
            border-color: #ed5565;
            color: #ffffff;
            border-radius: 0px;

        }

        #savingAndMessageDiv {
            background-color: #dedede;
            display: none;
            padding: 10px;
            justify-content: space-between;
            margin: 20px 0;
        }

        #infoBox {
            background-color: #e3a858;
            color: black;
            padding: 10px;
        }

        #infoBoxText {
            vertical-align: middle;
        }

        #infoBox .close {
            margin-left: 30px;
            vertical-align: middle;
            color: black;
        }

        #btnSave {
            margin-left: 10px;
        }

        #btnCancel, #btnResetDefaultFilter, #btnSave {
            min-width: 50px;
        }

        #btnResetDefaultFilter {
            display: none;
        }

        .ts-table-0-row,
        .ts-table-2-row,
        .ts-table-4-row,
        .capacityField_1,
        .capacityField_3,
        .capacityField_5
        {
            background-color: #ffffff;
        }

        .ts-table-1-row,
        .ts-table-3-row,
        .ts-table-5-row,
        .capacityField_0,
        .capacityField_2,
        .capacityField_4
        {
            background-color: #f7f7f7;
        }

        .ts-table-capacityField {
            width: 50px;
            text-align: center;
        }

        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 100px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .popUp-modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            border-radius: 0px;
            width: 40%;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
            -webkit-animation-name: animatetop;
            -webkit-animation-duration: 0.4s;
            animation-name: animatetop;
            animation-duration: 0.4s
        }


        .popUp-modal-body {
            padding: 0 20px;
            margin-top: 20px;
        }

        .popUp-modal-header {
            padding: 5px 20px;
            background-color: #f7f7f7;
            color: black;
        }

        .popUp-modal-footer {
            padding: 10px 20px;
            text-align: center;
            /*background-color: #5cb85c;*/
            /*color: white;*/
        }

        .close {
            color: #000;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .popUp-modal-header .close {
            margin-top: 5px;
        }

        .btn-customPrimary {
            background-color: #1ab394;
            border-color: #1ab394;
            color: #FFFFFF;
            border-radius: unset;
            margin-left: 10px;
        }

        .btn-invertedPrimary {
            background-color: #FFF;
            border-color: #1ab394;
            color: #1ab394;
            border-radius: unset;
            margin-right: 10px;
        }

    </style>
    {% embed '@Gui/Partials/widget.twig' %}
        {% block widget_content %}
            <form style="display:flex;">
                <div class="filters-holder">
                    <div class="filter-component">
                        <label for="cmbStores">{{ 'Location' | trans }}</label> <br>
                        <select id="cmbStores" name="location">
                            {% for merchantId, merchantName in merchantFilterButtonsData  %}
                                <option value="{{ merchantId }}">{{ merchantName }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                <div id="filterButtons">
                    <input id="btnFilterByPickzone" type="button" class="btn btn-customPrimary" value="{{ 'edit_standard_plan' | trans }}">
                    <input id="btnResetDefaultFilter" type="button" class="btn btn-custom-cancel" value="{{ 'Cancel' | trans }}">
                </div>

            </form>

            <div id="capacitySaveBox">
                <div id="savingAndMessageDiv">
                    <div style="margin-top: 8px">
                        <form>
                            <span style="margin-left: 10px;">{{ 'edit_standard_plan' | trans }}</span>
                            <input id="btnSave" type="button" class="btn btn-customPrimary" value="&#10003; {{ 'Save' | trans }}" disabled>
                            <input id="btnCancel" type="button" class="btn btn-custom-cancel" value="X  {{ 'Cancel' | trans }}" >
                        </form>
                    </div>
                    <div id="infoBox">
                        <span id="infoBoxText">ACHTUNG: "Sie ändern die Kapazitäten für den Standardplan"</span>
                        <button id="infoBoxClose" class="close">X</button>
                    </div>
                </div>

                <div id="formatedTables" data-changed="">

                </div>
            </div>

            <div>
                <div id="myModal" class="modal">
                    <div class="popUp-modal-content">
                        <div class="popUp-modal-header">
                            <span id="closeModal" class="close">&times;</span>
                            <span id="popUpTitle"></span>
                        </div>
                        <div class="popUp-modal-body">
                            <div id="popUpContent"></div>
                            Möchten Sie Ihre Eingaben wirklich zurücksetzen? (Sie werden nicht gespeichert.)
                            <hr/>

                        </div>
                        <div class="popUp-modal-footer" style="display: flex; justify-content: center;">
                            <div id="confirmNo"><button type="button" id="modalConfirmNo" class="btn btn-invertedPrimary btn-sm">Abbrechen</button></div>
                            <div id="confirmYes"><button type="button" id="modalConfirmYes" class="btn btn-customPrimary btn-sm">Okay</button></div>
                        </div>
                    </div>
                </div>
            </div>

            {#            <form>#}
            {#                <div class="filters-holder">#}
            {#                    <div class="filter-component">#}
            {#                        <label for="date_from">Datum von</label><br/>#}
            {#                        <input type="date" id="date_from" value="" onchange="handleDateRange(this, 'date-from-range-filter')">#}
            {#                    </div>#}
            {#                    <div class="filter-component">#}
            {#                        <label for="date_to">Datum bis</label><br/>#}
            {#                        <input type="date" id="date_to" value="" onchange="handleDateRange(this, 'date-to-range-filter')">#}
            {#                    </div>#}
            {#                </div>#}
            {#            </form>#}

        {% endblock %}
    {% endembed %}
    <script type="text/javascript">

        Array.prototype.groupBy = function(prop) {
            return this.reduce(function(groups, item) {
                const val = item[prop]
                groups[val] = groups[val] || []
                groups[val].push(item)
                return groups
            }, {})
        };

        let btnFilterByPickzone = document.getElementById("btnFilterByPickzone");
        let capacitySaveBoxDiv = document.getElementById("capacitySaveBox");
        let btnResetDefaultFilter = document.getElementById("btnResetDefaultFilter");
        let savingAndMessageDiv = document.getElementById("savingAndMessageDiv");
        let selectedStoreEl = document.getElementById("cmbStores");
        let capacityFieldEditor = document.getElementsByClassName("ts-table-capacityField");
        var formatedTablesDiv = document.getElementById("formatedTables");
        var btnSaveChangedData = document.getElementById("btnSave");
        var infoBox = document.getElementById("infoBox");
        var infoBoxText = document.getElementById("infoBoxText");
        var infoBoxClose = document.getElementById("infoBoxClose");
        var btnCancelTimeSlotChange = document.getElementById("btnCancel");
        var modal = document.getElementById("myModal");
        var btnCloseModal = document.getElementById("closeModal");
        var btnModalConfirmNo = document.getElementById("modalConfirmNo");
        var btnModalConfirmYes = document.getElementById("modalConfirmYes");

        infoBoxClose.addEventListener("click", function() {
            infoBox.style.display = "none";
        });

        btnCancelTimeSlotChange.addEventListener("click", function() {
            modal.style.display = "block";
        });

        btnCloseModal.addEventListener("click", function() {
            modal.style.display = "none";
        });

        btnModalConfirmNo.addEventListener("click", function() {
            modal.style.display = "none";
        });

        btnModalConfirmYes.addEventListener("click", function(ev) {
            ResetCapacitiesBlock();
            localStorage.removeItem('timeSlotCapacities');
            btnSaveChangedData.disabled = true;
            btnCancelTimeSlotChange.disabled = true;
            capacitySaveBoxDiv.style.display = "none";
            btnFilterByPickzone.style.display = "block";
            btnResetDefaultFilter.style.display = "none";
            modal.style.display = "none";
        });

        btnFilterByPickzone.addEventListener("click", function() {
            FormatByStore(selectedStoreEl.value);
            infoBox.style.backgroundColor = "#e3a858;";
            infoBoxText.innerText = 'ACHTUNG: "Sie ändern die Kapazitäten für den Standardplan"';
            savingAndMessageDiv.style.display = "flex";
            capacitySaveBoxDiv.style.display = "block";
            btnFilterByPickzone.style.display = "none";
            btnResetDefaultFilter.style.display = "block";
            infoBox.style.display = "block";
        });

        btnResetDefaultFilter.addEventListener("click", function() {
            modal.style.display = "block";
        });

        btnSaveChangedData.addEventListener("click", function() {
            SaveTimeSlots(selectedStoreEl.value, localStorage.getItem('timeSlotCapacities'));
        });

        function SaveTimeSlots(store, changedData){
            var formData = new FormData();
            formData.append("store", store)
            formData.append("changedData", changedData);

            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var dataParse = JSON.parse(this.response);

                    if(dataParse["isSuccess"] === true){
                        infoBox.style.backgroundColor = "#c1e1ca";
                        infoBoxText.innerText = "Ihre Änderungen wurden gespeichert";
                    }

                }
            };
            xhttp.open("POST", window.location.origin + "/sales/index/saveTimeSlots");
            xhttp.send(formData);
        }

        function FormatByStore(store) {
            localStorage.removeItem('timeSlotCapacities');
            btnSaveChangedData.disabled = true;
            btnCancelTimeSlotChange.disabled = true;

            var formData = new FormData();
            formData.append("store", store);

            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState === 4 && this.status === 200) {
                    var dataParse = JSON.parse(this.response);

                    let groupedByDay = dataParse.groupBy('Day');

                    ResetCapacitiesBlock();

                    for (const [key, value] of Object.entries(groupedByDay)) {
                        formatedTablesDiv.insertAdjacentHTML("beforeend",
                            '<div class="col col-md-6">' +
                            '<table>' +
                            '<thead><tr><th>' + key + '</th><th>Default</th><th></th></tr></thead>' +
                            '<tbody id="tbody_' + key + '"><tr class="ts-table-info-row"><td>Timeslot</td><td>Kapazitaten</td><td></td></tr></tbody>' +
                            '</table>' +
                            '</div>');
                        let capacitySum = value.map(o => o["Capacity"]).reduce((a, c) => {
                            return a + c
                        });
                        let rowCounter = 0;

                        for (const timeSlot of value) {

                            document.getElementById("tbody_" + key).insertAdjacentHTML("beforeend",
                                '<tr class="ts-table-' + rowCounter + '-row">' +
                                '<td>' + timeSlot["TimeSlot"] + '</td>' +
                                '<td><div id="capacityRow_' + key + '_' + rowCounter + '"  class="ts-table-capacityField capacityField_' + rowCounter + ' cf_' + key + '_' + rowCounter + '" contenteditable="true">' + timeSlot["Capacity"] + '</div></td>' +
                                '<td></td>' +
                                '</tr>'
                            );

                            rowCounter++;
                        }

                        document.getElementById("tbody_" + key).insertAdjacentHTML("beforeend",
                            '<tr class="ts-table-sum-row">' +
                            '<td></td>' +
                            '<td id="capacitySum_' + key + '">' + capacitySum + '</td>' +
                            '<td></td>' +
                            '</tr>'
                        );

                        let capacityFieldEditor = document.getElementsByClassName("ts-table-capacityField");

                        for (let capacity of capacityFieldEditor) {
                            capacity.setAttribute("oldValue", capacity.innerText);
                            capacity.addEventListener("focusout", function (ev) {
                                onTableEditorInput(ev, key);
                            });
                        }
                    }
                }
            };
            xhttp.open("POST", window.location.origin + "/sales/index/filterByStore");
            xhttp.send(formData);
        }

        function onTableEditorInput(ev, day){
            let sumOfCapacity = document.getElementById("capacitySum_" + day);
            let oldRowCapacityValue = parseInt(ev.target.getAttribute("oldvalue"));
            let currentRowCapacityValue = ev.target.innerText;
            let isnum = /^\d+$/.test(currentRowCapacityValue);
            if(currentRowCapacityValue === ""){
                currentRowCapacityValue = 0;
                isnum = true;
            }

            let idFieldSplited = ev.target.id.split('_');

            let changedDayRow = idFieldSplited[1];
            if(day === changedDayRow){
                if(!isnum){
                    ev.target.innerText = oldRowCapacityValue;
                    setEndOfContenteditable(ev.target);
                }
                else {
                    sumOfCapacity.innerText = (parseInt(sumOfCapacity.innerText) - parseInt(oldRowCapacityValue)) + parseInt(currentRowCapacityValue);
                    ev.target.setAttribute("oldValue", currentRowCapacityValue);

                    let changedDataArray = JSON.parse(localStorage.getItem('timeSlotCapacities'));

                    var currentSave = idFieldSplited[1] + "_" + idFieldSplited[2];
                    if(changedDataArray === null){
                        changedDataArray = [];
                    }

                    var obj = {};
                    obj[currentSave] = currentRowCapacityValue;

                    if(changedDataArray.length === 0){
                        changedDataArray.push(obj);
                    }
                    else{

                        for (let changedData of changedDataArray) {
                            if(currentSave in changedData){
                                if(changedData.hasOwnProperty(currentSave)){
                                    delete changedData[currentSave];
                                }
                            }
                        }

                            changedDataArray.push(obj);

                    }

                    var cleanedArray = changedDataArray.filter(value => Object.keys(value).length !== 0);
                    var jsonData = JSON.stringify(cleanedArray);

                    localStorage.setItem('timeSlotCapacities', jsonData);
                    btnSaveChangedData.disabled = false;
                    btnCancelTimeSlotChange.disabled = false;

                }
            }
        }

        function setEndOfContenteditable(contentEditableElement)
        {
            var range,selection;
            if(document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+
            {
                range = document.createRange();//Create a range (a range is a like the selection but invisible)
                range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range
                range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start
                selection = window.getSelection();//get the selection object (allows you to change selection)
                selection.removeAllRanges();//remove any selections already made
                selection.addRange(range);//make the range you have just created the visible selection
            }
            else if(document.selection)//IE 8 and lower
            {
                range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)
                range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range
                range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start
                range.select();//Select the range (make it the visible selection
            }
        }

        function ResetCapacitiesBlock(){
            while (formatedTablesDiv.lastChild) {
                formatedTablesDiv.removeChild(formatedTablesDiv.lastChild);
            }
        }

    </script>
{% endblock %}
