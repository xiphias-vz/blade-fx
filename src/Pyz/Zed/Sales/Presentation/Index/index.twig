{% extends '@Sales/Layout/layout.twig' %}



{% block section_title %}
    {{ 'Overview of Orders' | trans }}
{% endblock %}

{% block content %}
    <style>

        .filters-holder {
            display: flex;
            align-items: center;
        }

        .filters-holder .filter-component {
            display: inline-block;
            margin-right: 10px;
        }

        .filters-holder #location {
            width: 145px;
            padding: 2px;
        }

        .filters-holder .save-pickZone-btn {
            background: #14ba93;
            text-transform: uppercase;
            color:#fff;
            display: block;
            outline: none;
            border: none;
            margin: 5px auto 10px auto;
            padding: 4px 20px;
        }

        .dropdown-check-list {
            display: inline-block;
        }

        .dropdown-check-list .anchor {
            width: 145px;
            position: relative;
            cursor: pointer;
            display: inline-block;
            padding-left: 10px;
            border-radius: 2px;
            border: 1px solid #767676;
        }

        .dropdown-check-list .pickZone-value, .timeslot-value {
            display: inherit;
            width: 110px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .dropdown-check-list .anchor .fa.arrow:before {
            position: absolute;
            right: 6px;
            top: 1px;
            font-weight: bold;
            font-size: 16px;
            content: '\f107';
        }

        .dropdown-check-list ul.items {
            padding: 2px;
            display: none;
            margin: 0;
            border: 1px solid #ccc;
            border-top: none;
        }

        .dropdown-check-list ul.items li {
            list-style: none;
        }

        .dropdown-check-list.visible .anchor {
            color: #0094ff;
        }

        .dropdown-check-list.visible .items {
            width: 145px;
            height: inherit;
            display: block;
            padding: 2px;
            z-index: 1000000;
            position: absolute;
            margin: 0;
            border: 1px solid #ccc;
            border-top: none;
            background: #FFFFFF;
            overflow: auto;
        }

        .dropdown-check-list.visible .items li {
            font-size: 14px;
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .dropdown-check-list.visible .items li span {
            margin-left: 5px;
        }

        .active-filters .picking-zone-active-filter, .time-slot-active-filter, .clear-all-filters {
            display: flex;
            align-items: center;
        }

       .active-filter {
            width: 145px;
            position: relative;
            border: 1px solid #14ba93;
            padding: 5px 10px 5px 5px;
            margin: 15px 10px 15px 0;
        }


        .delete-filter-icon {
            position: absolute;
            right: 5px;
            cursor: pointer;
        }


        .btn-customPrimary {
            background-color: #1ab394;
            border-color: #1ab394;
            color: #FFFFFF;
            border-radius: unset;
            margin-left: 10px;
            margin-top: 20px;
        }


    </style>
    {% set currentPath = path(app.request.attributes.get('_route')) %}

    {% embed '@Gui/Partials/widget.twig' with { widget_title: 'List of orders' | trans } %}

        {% block widget_content %}
            <form>
                <div class="filters-holder">
                    <div class="filter-component">
                        <label for="location">{{ 'Location' | trans }}</label> <br>
                        <select id="location" name="location" onchange="onChangeLocation(this)">
                            <option value="" disabled selected>{{ 'All' | trans }}</option>
                            {% for merchantId, merchantName in merchantFilterButtonsData  %}
                                <option value="{{ merchantId }}">{{ merchantName }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="filter-component">
                        <label for="date_from">{{ 'Date From' | trans }}</label><br/>
                        <input type="date" id="date_from" value="" onchange="handleDateRange(this, 'date-from-range-filter')">
                    </div>
                    <div class="filter-component">
                        <label for="date_to">{{ 'Date To' | trans }}</label><br/>
                        <input type="date" id="date_to" value="" onchange="handleDateRange(this, 'date-to-range-filter')">
                    </div>
                    <div class="filter-component">
                        <div id="list2" style="outline: none" class="dropdown-check-list" tabindex="100">
                            <span class="title" style="font-weight: bold;margin-bottom: 5px;display: block">{{ 'Timeslot' | trans }}</span>
                            <span class="anchor"><span class="timeslot-value">{{ 'All' | trans }}</span>
                            <span class="fa arrow"></span>
                            </span>
                            <ul class="items">
                                {% for timeslot in timeslotsFilterButtonData  %}
                                    <li class="timeSlot"><input type="checkbox" value="{{ timeslot }}" /><span>{{ timeslot }}</span></li>
                                {% endfor %}
                                <li>
                                    <button class="save-pickZone-btn" type="button" onclick="saveMultiSelectedFields(this.parentElement.parentElement, 'timeSlot')">{{ 'Save' | trans }}</button>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="filter-component">
                        <label for="status">{{ 'Status' | trans }}</label> <br>
                        <select id="status" name="status" style="padding: 2px" onchange="handleDateRange(this, 'state-status-filter')">
                            <option value="" disabled selected>{{ 'All' | trans }}</option>
                            <option value="ready for picking">ready for picking</option>
                            <option value="picked">picked</option>
                            <option value="paused">paused</option>
                            <option value="ready for collection">ready for collection</option>
                            <option value="order invoiced">order invoiced</option>
                            <option value="cancelled">cancelled</option>
                        </select>
                    </div>
                    <div class="filter-component">
                        <div id="list1" style="outline: none" class="dropdown-check-list" tabindex="100">
                            <span class="title" style="font-weight: bold;margin-bottom: 5px;display: block">{{ 'Pickzone' | trans }}</span>
                            <span class="anchor"><span class="pickZone-value">{{ 'All' | trans }}</span>
                            <span class="fa arrow"></span>
                            </span>
                            <ul class="items">
                                {% for key, name in pickingZones  %}
                                    <li class="pickZone"><input type="checkbox" id="{{ key }}" value="{{ name }}" /><span>{{ name }}</span></li>
                                {% endfor %}
                                <li>
                                    <button class="save-pickZone-btn" type="button" onclick="saveMultiSelectedFields(this.parentElement.parentElement, 'pickZone')">{{ 'Save' | trans }}</button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="active-filters" style="display: flex;flex-wrap: wrap">
                    <div class='merchant-reference-filter'></div>
                    <div class='store-status-filter'></div>
                    <div class="time-slot-active-filter"></div>
                    <div class="picking-zone-active-filter" data-pickingZones="picking-zones"></div>
                    <div class="clear-all-filters" style="color:#14ba93;cursor: pointer;visibility: hidden;" onclick="clearAllFilters()"><span style="margin-right: 4px">x</span>{{ 'Clear all filters' | trans }}</div>
                </div>
            </form>
            <div style="margin-bottom: 10px"></div>
            {{ orders | raw }}

        {% endblock %}

    {% endembed %}

    <script>
        const parametersList = window.location.search;
        const queryParams = new URLSearchParams(window.location.search);
        const pickingZoneList = document.querySelector('#list1');
        const timeSlotList = document.querySelector('#list2');
        const pickingZoneValue = document.querySelector('.pickZone-value');
        const timeSlotValue = document.querySelector('.timeslot-value');
        const pickingZonesActiveFilter = document.querySelector('.picking-zone-active-filter');
        const timeSlotActiveFilter = document.querySelector('.time-slot-active-filter');
        const merchantReferenceActiveFilter = document.querySelector('.merchant-reference-filter');
        const storeStatusActiveFilter = document.querySelector('.store-status-filter');
        const filterButton = document.querySelector("#btnSaveFilters");
        const clearAllFiltersDOM = document.querySelector('.clear-all-filters');
        let today = new Date();
        const sevenDaysInMs = 7 * 24 * 60 * 60 * 1000;
        let dateFromHTML = document.querySelector('#date_from');
        let dateToHTML = document.querySelector('#date_to');
        let dateToTime = new Date(dateToHTML.value).getTime();
        let dateFromTime = new Date(dateFromHTML.value).getTime();

        let initialState = {
            merchant: '',
            merchantID: '',
            timeSlots: [],
            storeStatus: '',
            pickZones: [],
            dateFrom: today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2)
                + '-' + ('0' + today.getDate()).slice(-2),
            dateTo: today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2)
                + '-' + ('0' + today.getDate()).slice(-2)
        }
        let filterState =  localStorage.getItem('filterState') !== null ? JSON.parse(localStorage.getItem('filterState')) : initialState
        if(parametersList === "") {
            filterState = initialState;
        }

        if (timeSlotList.querySelector('.items').childElementCount > 10) {
            timeSlotList.querySelector('.items').style.height = "200px";
        }

        function handleDateRange(current, id) {
            queryParams.set(id, current.value);
            if(id === 'state-status-filter') {
                createActiveFilter('ADD_STORE_STATUS', current.value, false)
                saveFilterStateToStorage();
            } else if(id === 'date-from-range-filter') {
                if(filterState.dateTo !== "") {
                    let dateToTime = new Date(dateToHTML.value).getTime();
                    let dateFromTime = new Date(dateFromHTML.value).getTime();
                    let futureSevenDaysFromMaxDate = dateFromTime + sevenDaysInMs;

                    let timeDiff = dateToTime - dateFromTime;

                    if(timeDiff > sevenDaysInMs) {
                        dateToHTML.value = new Date(futureSevenDaysFromMaxDate).getFullYear() + '-' + ('0' + (new Date(futureSevenDaysFromMaxDate).getMonth() + 1)).slice(-2)
                            + '-' + ('0' + new Date(futureSevenDaysFromMaxDate).getDate()).slice(-2);
                        filterState = { ...filterState, dateFrom: current.value, dateTo: dateToHTML.value };
                        queryParams.set('date-to-range-filter', filterState.dateTo);
                    } else if(dateToTime < dateFromTime) {
                        dateToHTML.value = new Date(dateFromTime).getFullYear() + '-' + ('0' + (new Date(dateFromTime).getMonth() + 1)).slice(-2)
                            + '-' + ('0' + new Date(dateFromTime).getDate()).slice(-2);
                        filterState = { ...filterState, dateFrom: current.value, dateTo: dateToHTML.value };
                        queryParams.set('date-to-range-filter', filterState.dateTo);
                    } else {
                        filterState = { ...filterState, dateFrom: current.value, dateTo: dateToHTML.value };
                        queryParams.set('date-to-range-filter', filterState.dateTo);
                    }
                }
                saveFilterStateToStorage();
                window.location = location.pathname + '?' + queryParams.toString();
            }
            else if(id === 'date-to-range-filter') {
                if(filterState.dateFrom !== "") {
                    let dateToTime = new Date(dateToHTML.value).getTime();
                    let dateFromTime = new Date(dateFromHTML.value).getTime();
                    let pastSevenDaysFromMaxDate = dateToTime - sevenDaysInMs;

                    let timeDiff = dateToTime - dateFromTime;

                    if(timeDiff > sevenDaysInMs) {
                        dateFromHTML.value = new Date(pastSevenDaysFromMaxDate).getFullYear() + '-' + ('0' + (new Date(pastSevenDaysFromMaxDate).getMonth() + 1)).slice(-2)
                            + '-' + ('0' + new Date(pastSevenDaysFromMaxDate).getDate()).slice(-2);
                        filterState = { ...filterState, dateTo: current.value, dateFrom: dateFromHTML.value };
                        queryParams.set('date-from-range-filter', filterState.dateFrom);
                    } else if(dateToTime < dateFromTime) {
                        dateFromHTML.value = new Date(dateToTime).getFullYear() + '-' + ('0' + (new Date(dateToTime).getMonth() + 1)).slice(-2)
                            + '-' + ('0' + new Date(dateToTime).getDate()).slice(-2);
                        filterState = { ...filterState, dateTo: current.value, dateFrom: dateFromHTML.value };
                        queryParams.set('date-from-range-filter', filterState.dateFrom);
                    } else {
                        filterState = { ...filterState, dateTo: current.value, dateFrom: dateFromHTML.value };
                        queryParams.set('date-from-range-filter', filterState.dateFrom);
                    }
                }
                saveFilterStateToStorage();
                window.location = location.pathname + '?' + queryParams.toString();
            }
        }

        window.onload = function() {
            let locationDropdown = document.querySelector('#location');
            let statusSelect = document.querySelector('#status');

            let selectedPickZones = filterState.pickZones;
            let timeSlots = filterState.timeSlots;
            let merchantID = filterState.merchantID;
            let status = filterState.storeStatus;
            let dateFrom = filterState.dateFrom;
            let dateTo = filterState.dateTo;
            let isFilterStateEmpty = selectedPickZones.length === 0 || timeSlots.length === 0 || status === '' || dateFrom === '' || dateTo === '';
            if(isFilterStateEmpty) {
                clearAllFiltersDOM.style.visibility = 'hidden';
            } else if(!(isFilterStateEmpty)) {
                clearAllFiltersDOM.style.visibility = 'visible';
            }

            dateFromHTML.value = dateFrom === '' ? today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2)
                + '-' + ('0' + today.getDate()).slice(-2) : dateFrom;
            dateToHTML.value = dateTo === '' ? today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2)
                + '-' + ('0' + today.getDate()).slice(-2) : dateTo;


            locationDropdown.value = merchantID;
            statusSelect.value = status;
            filterState = { ...filterState, dateFrom: dateFromHTML.value, dateTo: dateToHTML.value }
            createActiveFilter('ADD_STORE_STATUS', filterState.storeStatus, true);
            createActiveFilter('ADD_MERCHANT', filterState.merchant, true);

            for (let i = 0; i < selectedPickZones.length; i++) {
                createActiveFilter('ADD_PICK_ZONE', selectedPickZones[i], true);
            }
            updateMultiDropdownSelectionFieldValue('pickZone', pickingZoneValue);
            updateMultiDropdownSelectionFieldValue('timeSlot', timeSlotValue);

            for (let i = 0; i < timeSlots.length; i++) {
                createActiveFilter('ADD_TIME_SLOTS', timeSlots[i], true);
            }
            checkMultiSelectItems();
            saveFilterStateToStorage();
        }


        function onChangePickingZone(current) {
            let selectedOption = current.options[current.selectedIndex];
            let merchantID = selectedOption.value;
            queryParams.set('state-status', merchantID)
        }
        function onChangeLocation(current) {
            let selectedOption = current.options[current.selectedIndex];
            let merchant = selectedOption.text;
            let merchantID = selectedOption.value;
            queryParams.set('merchant-reference-filter', merchantID);
            filterState = { ...filterState, merchant, merchantID }
            saveFilterStateToStorage();
            createActiveFilter('ADD_MERCHANT', selectedOption.innerText, false)
            window.location = location.pathname + '?' + queryParams.toString();
        }

        function checkMultiSelectItems() {
            const timeSlots = document.querySelectorAll('.timeSlot');
            const pickZones = document.querySelectorAll('.pickZone');
            let selectedPickZones = filterState.pickZones;
            let selectedTimeSlots = filterState.timeSlots;
            checkActiveMultiSelectItems(selectedPickZones, pickZones);
            checkActiveMultiSelectItems(selectedTimeSlots, timeSlots);
        }

        function checkActiveMultiSelectItems(activeItems, listOfItems) {
            for(let i = 0; i < activeItems.length; i++) {
                let activeItem = activeItems[i];

                for(let j = 0; j < listOfItems.length; j++) {
                    let currentListItem = listOfItems[j].firstElementChild.value;
                    if(activeItem === currentListItem) {
                        listOfItems[j].firstElementChild.checked = true;
                    }
                }
            }
        }

        function saveMultiSelectedFields(parent, fieldToSave) {
            const allFields = parent.querySelectorAll('.' + fieldToSave);
            let activeFields = [];
            for(let i = 0; i < allFields.length; i++) {
               let isFieldSelected = allFields[i].firstElementChild.checked;
               let activeValue = allFields[i].firstElementChild.value;
               if (isFieldSelected) {
                   activeFields.push(activeValue);
                   if(fieldToSave === 'pickZone') {
                       filterState = { ...filterState,  pickZones: activeFields}
                   }
                   else if(fieldToSave === 'timeSlot') {
                       filterState = { ...filterState, timeSlots: activeFields }
                   }
               }
               else {
                   if(fieldToSave === 'pickZone') {
                       let pickZones = filterState.pickZones;
                       pickZones = pickZones.filter(pickZone => pickZone.toLowerCase() !== activeValue.toLowerCase());
                       filterState = { ...filterState, pickZones }

                   }
                   else {
                       let timeSlots = filterState.timeSlots;
                       timeSlots = timeSlots.filter(timeSlot => timeSlot.toLowerCase() !== activeValue);
                       filterState = { ...filterState, timeSlots }

                   }
               }
            }

            if(fieldToSave === 'pickZone') {
                pickingZoneList.classList.remove('visible');
                saveFilterStateToStorage();
                submitFilters('pickZones');
            }

            else if (fieldToSave === 'timeSlot') {
                timeSlotList.classList.remove('visible');
                saveFilterStateToStorage();
                submitFilters('timeSlots');
            }
        }
        function unSetMultiSelectField(valueToUnCheck, htmlElements) {
            let fieldToUnSelect;
            if(htmlElements === 'timeSlot'){
                fieldToUnSelect = timeSlotList.querySelectorAll('.' + htmlElements);
            }
            else {
                fieldToUnSelect = pickingZoneList.querySelectorAll('.' + htmlElements);
            }
            for(let i = 0; i < fieldToUnSelect.length; i++) {
                if(valueToUnCheck.toLowerCase() === fieldToUnSelect[i].firstElementChild.value.toLowerCase()) {
                    fieldToUnSelect[i].firstElementChild.checked = false;
                }
            }
        }
        function updateMultiDropdownSelectionFieldValue(fieldToSave, htmlElement) {
            let dataToUnset;
            if(fieldToSave === 'pickZone') {
                dataToUnset = filterState.pickZones;
            }
            else {
                dataToUnset = filterState.timeSlots;
            }
            htmlElement.textContent = '';
            if(dataToUnset.length === 0) {
                htmlElement.textContent = '{{ 'All' | trans }}';

            }
            for(let i = 0; i < dataToUnset.length; i++) {
                if(i === dataToUnset.length - 1) {
                    htmlElement.textContent += dataToUnset[i] + ''
                } else {
                    htmlElement.textContent += dataToUnset[i] + ','
                }
            }
        }
        function renderFilterState(operation) {
            if(operation === 'REFRESH_PICK_ZONE_ACTIVE_FILTER') {
                pickingZonesActiveFilter.innerHTML = "";
                let selectedPickZones = filterState.pickZones;
                for(let i = 0; i < selectedPickZones.length; i++) {
                    createActiveFilter('ADD_PICK_ZONE', selectedPickZones[i], true);
                }
            }
            else if(operation === 'REFRESH_TIME_SLOT_ACTIVE_FILTER') {
                timeSlotActiveFilter.innerHTML = "";
                let selectedTimeSlots = filterState.timeSlots;
                for(let i = 0; i < selectedTimeSlots.length; i++) {
                    createActiveFilter('ADD_TIME_SLOTS', selectedTimeSlots[i], true);
                }
            }
        }
        function createActiveFilter(operation, activeField, showActiveFilter) {

            switch (operation) {
                case 'ADD_MERCHANT':
                    if(activeField === "")
                        return;
                    filterState = { ...filterState, merchant: activeField };

                    if(!showActiveFilter)
                        return;

                    if(merchantReferenceActiveFilter.querySelector('.merchant-filter') !== null) {
                        merchantReferenceActiveFilter.querySelector('.merchant-filter .value').innerHTML = activeField;
                    } else {
                        let wrapper = createWrapper('merchant-filter',activeField);
                        merchantReferenceActiveFilter.appendChild(wrapper);
                    }
                    break;

                case 'ADD_PICK_ZONE':

                    let pickingZoneWrapper = createWrapper('pickZone-filter', activeField);
                    pickingZonesActiveFilter.appendChild(pickingZoneWrapper);
                    break;

                case 'ADD_TIME_SLOTS':
                    let timeSlotWrapper = createWrapper('timeSlot-filter', activeField);
                    timeSlotActiveFilter.appendChild(timeSlotWrapper);

                    break;

                case 'ADD_STORE_STATUS':
                    if(activeField === "")
                        return;
                    filterState = { ...filterState, storeStatus: activeField }

                    if(!showActiveFilter)
                        return;
                    if(storeStatusActiveFilter.querySelector('.status-filter') !== null) {
                        storeStatusActiveFilter.querySelector('.status-filter .value').innerHTML = activeField;
                    } else {
                        let wrapper = createWrapper('status-filter',activeField);
                        storeStatusActiveFilter.appendChild(wrapper);
                    }
                    break;

                default:
                    break;
            }
            clearAllFiltersDOM.style.visibility = 'visible';
            saveFilterStateToStorage();
        }
        function createWrapper(additionalOperation, value) {
            let wrapper = document.createElement('div');
            let deleteIcon = document.createElement('span');
            deleteIcon.innerHTML = 'X';
            deleteIcon.classList.add('delete-filter-icon');
            wrapper.classList.add('active-filter');
            wrapper.className +=  ' ' + additionalOperation;
            deleteIcon.addEventListener('click', (e) => deleteActiveFilter(additionalOperation,e));
            wrapper.innerHTML = `<span class="value">${value}</span>`;
            wrapper.appendChild(deleteIcon);

            return wrapper;
        }
        function deleteActiveFilter(operation,event) {
            let activeFilter = event.target.previousElementSibling;
            if (operation === 'pickZone-filter') {
                let { pickZones } = filterState;
                pickZones = pickZones.filter(pickZone => pickZone !== activeFilter.textContent);
                filterState = { ...filterState, pickZones }
                updateMultiDropdownSelectionFieldValue('pickZone', pickingZoneValue);
                unSetMultiSelectField(activeFilter.textContent, 'pickZone');
                renderFilterState('REFRESH_PICK_ZONE_ACTIVE_FILTER');
                submitFilters('pickZones');
            }

            else if (operation === 'timeSlot-filter') {
                let { timeSlots } = filterState;
                timeSlots = timeSlots.filter(pickZone => pickZone !== activeFilter.textContent);
                filterState = { ...filterState, timeSlots }
                updateMultiDropdownSelectionFieldValue('timeSlot', timeSlotValue);
                unSetMultiSelectField(activeFilter.textContent, 'timeSlot');
                renderFilterState('REFRESH_TIME_SLOT_ACTIVE_FILTER');
                submitFilters('timeSlots');
            }

            else if(operation === 'merchant-filter') {
                filterState = { ...filterState, merchant: '', merchantID: '' }
                event.target.parentElement.remove();
                submitFilters('merchant-reference-filter');

            }

            else if(operation === 'status-filter') {
                filterState = { ...filterState, storeStatus: '' }
                event.target.parentElement.remove();
                submitFilters('state-status-filter')
            }
            let isFilterStateEmpty = filterState.pickZones.length === 0 && filterState.timeSlots.length === 0 && filterState.storeStatus === '' && filterState.merchant === '';

            if(isFilterStateEmpty) {
                clearAllFiltersDOM.style.visibility = 'hidden';
            }
            saveFilterStateToStorage();
        }

        function submitFilters(nameOfParameter) {
            switch (nameOfParameter) {
                case 'pickZones':
                    queryParams.set(nameOfParameter, encodeURIComponent(JSON.stringify(filterState.pickZones)))
                    break;
                case 'timeSlots':
                    queryParams.set(nameOfParameter, encodeURIComponent(JSON.stringify(filterState.timeSlots)))
                    break;
                case 'merchant-reference-filter':
                    queryParams.set(nameOfParameter, filterState.merchant);
                    break;
                case 'state-status-filter':
                    queryParams.set(nameOfParameter, filterState.storeStatus)
                    break;
                default:
                    break;
            }

            let isFilterStateEmpty = filterState.pickZones.length === 0 && filterState.timeSlots.length === 0 && filterState.storeStatus === '' && filterState.merchant === '';
            if(isFilterStateEmpty) {
                window.location = location.pathname;
            }
            else {
                window.location = location.pathname + '?' + queryParams.toString();
            }
        }

        function clearAllFilters() {
            filterState = initialState;
            saveFilterStateToStorage();
            window.location = location.pathname;
        }

        function saveFilterStateToStorage() {
            localStorage.setItem('filterState', JSON.stringify(filterState));
        }

        function  getFilterStateFromStorage() {
            return JSON.parse(localStorage.getItem('filterState')) || [];
        }

    </script>

{% endblock %}

