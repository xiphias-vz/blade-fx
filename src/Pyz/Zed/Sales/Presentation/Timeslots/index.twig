{% extends '@Sales/Layout/layout.twig' %}

{% set widget_title = 'Timeslots' | trans %}

{% block action %}
{% endblock %}

{% block section_title %}
    {{ widget_title }}
{% endblock %}

{% block content %}
    <style>
        .btn-customPrimary {
            background-color: #1ab394;
            border-color: #1ab394;
            color: #FFFFFF;
            border-radius: unset;
            margin-left: 10px;
        }
        #cmbStores {
            width: 130px;
            height: 35px;
        }

        #btnFilterByStore, #btnResetDefaultDayFilter, #btnResetDefaultDateFilter, #btnFilterByDate {
            margin-left: 10px;
            min-width: 50px;
            height: 35px;
            margin-top: 23px;
        }

        #timeSlotTables {
            margin-top: 30px;
            min-height: 1100px;
        }

        #timeSlotTables table {
            width: 95%;
            margin-bottom: 20px;
        }

        #timeSlotTables thead {
            background-color: #333333;
            color: white;
        }

        #timeSlotTables th {
            max-width: 60px;
        }

        #timeSlotTables th, td {
            padding: 8px !important;
        }

        #timeSlotTables tr {
            text-align: center;
        }

        #timeSlotTables.ts-table-sum-row {
            background-color: #c1e1ca;
            color: black;
        }

        .btn-custom-cancel {
            background-color: #ed5565;
            border-color: #ed5565;
            color: #ffffff;
            border-radius: 0px;

        }

        #savingAndMessageDiv {
            background-color: #dedede;
            display: none;
            padding: 10px;
            justify-content: space-between;
            margin: 20px 0;
            clear: both;
        }

        #infoBox {
            background-color: rgb(193, 225, 202);
            color: black;
            padding: 10px;
            display: none;
            justify-content: center;
            align-items: center;
        }

        #infoBoxText {
            vertical-align: middle;
        }

        #infoBox .close {
            margin-left: 30px;
            vertical-align: middle;
            color: black;
        }

        #btnSave {
            margin-left: 10px;
        }

        #btnCancel, #btnResetDefaultDayFilter, #btnSave, #btnSaveTimeslotDefinition {
            min-width: 50px;
        }

        #btnCancel {
            margin-left: 15px;
        }

        #btnResetDefaultDayFilter{
            display: none;
        }

        .close {
            color: #000;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .popUp-modal-header .close {
            margin-top: 5px;
        }

        .btn-customPrimary {
            background-color: #1ab394;
            border-color: #1ab394;
            color: #FFFFFF;
            border-radius: unset;
            margin-left: 10px;
        }

        .defaultTable th {
            width: 700px;
            color: white;
            padding: 5px 0 5px 15px;
        }

        .filter-component {
            display: inline-block;
        }

        .filters-holder {
            display: flex;
            align-items: end;
        }

        #dayFilterButtons {
            display: inline-block;
        }

        input[type="button"], button {
            cursor: pointer;
        }

        {% if isUserAdmin != 1 and isUserSupervisor !=1 %}
        #savingAndMessageDiv {
            visibility: hidden;
            display: none;
        }

        {% else %}
        #savingAndMessageDiv {
            display: flex;
            align-items: center;
        }
        {% endif %}

        #storeFilter {
            margin-bottom: 20px;
        }

        #cmbStoresTSD, #cmbStartTime, #cmbEndTime, #cmbEndTime, #cmbTimeslotSize, #txtDefaultCapacity {
            width: 130px;
            height: 35px;
            margin: 0 10px;
        }

        #timeslotDefinition label {
            margin: 5px 10px !important;
        }


    </style>
    <form id="cutoffTimesData" method="post" action="/sales/timeslots/index">
        <div style="margin-bottom: 20px;">
            <div id="storeFilter" class="col-md-4 col-lg-4">
                <div class="filters-holder">
                    <div class="filter-component">
                        <label for="cmbStores">{{ 'Location' | trans }}</label> <br>
                        <select id="cmbStores" name="location">
                            {% for storeId, storeName in storesData  %}
                                <option value="{{ storeId }}" {%  if currentStore == storeId %}selected{% endif %}>{{ storeName }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div id="dayFilterButtons">
                        <input id="btnFilterByStore" type="submit" class="btn btn-customPrimary" value="{{ 'edit_standard_plan' | trans }}">
                        <input id="btnResetDefaultDayFilter" type="button" class="btn btn-custom-cancel" value="{{ 'Cancel' | trans }}">
                    </div>
                </div>
            </div>

            <div id="timeslotDefinition" class="col-md-8 col-lg-8">
                <div class="filters-holder">

                    <div class="filter-component">
                        <label for="cmbStartTime">{{ 'sales.timeslotDefinitions.start-time' | trans }}</label><br>
                        <select id="cmbStartTime" name="startTime">
                            {% for id, hour in hoursOfTheDay  %}
                                <option value="{{ id }}">{{ hour }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="filter-component">
                        <label for="cmbEndTime">{{ 'sales.timeslotDefinitions.end-time' | trans }}</label><br>
                        <select id="cmbEndTime" name="endTime">
                            {% for id, hour in hoursOfTheDay  %}
                                <option value="{{ id }}">{{ hour }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="filter-component">
                        <label for="cmbTimeslotSize">{{ 'sales.timeslotDefinitions.timeslots-size' | trans }}</label><br>
                        <select id="cmbTimeslotSize" name="timeslotSize">
                            {% for id, size in timeSlotSize  %}
                                <option value="{{ id }}">{{ size }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <div class="filter-component">
                        <label for="txtDefaultCapacity">{{ 'sales.timeslotDefinitions.default-capacity' | trans }}</label><br>
                        <input id="txtDefaultCapacity" type="text" name="defaultCapacity" value="0" />
                    </div>

                    <div id="timeSlotDefinitionSave">
                        <input id="btnSaveTimeslotDefinition" type="button" class="btn btn-customPrimary" value="&#10003; {{ 'Save' | trans }}">
                    </div>
                </div>
            </div>
        </div>
    <div id="savingAndMessageDiv">
        <div>
            <form>
                <span style="margin-left: 10px;">{{ 'edit_standard_plan' | trans }}</span>
                <input id="btnSave" type="button" class="btn btn-customPrimary" value="&#10003; {{ 'Save' | trans }}">
                <input id="btnCancel" type="button" class="btn btn-custom-cancel" value="X  {{ 'Cancel' | trans }}" >
            </form>
        </div>
        <div id="infoBox">
            <span id="infoBoxText">Success</span>
            <button id="infoBoxClose" class="close">x</button>
        </div>
    </div>

    <div id="timeSlotTables" data-changed="">
        {% set daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}

        {% for day in daysOfWeek %}
            <table style="width: auto; display: inline-block; padding: 30px">
                <thead>
                    <tr>
                        <td>{{ day }}</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Timeslot</td>
                        <td>Cut-off time</td>
                    </tr>

                    {% for key in currentCutoffs|keys %}
                        {% set cutOffDay = currentCutoffs[key].day %}
                        {% set cutOffTime = currentCutoffs[key].cutOffTime %}
                        {% set cutOffsArray = ["10","12","14","16","18"] %}
                        {% if cutOffDay == day %}
                            <tr class="timeslot-row-id-{{ currentCutoffs[key].idTimeSlot }}" style="border: 1px solid white">
                                <td style="width: 350px;">{{ currentCutoffs[key].timeSlot }}</td>
                                {% if cutOffTime is not empty %}
                                    <td style="width: 350px;"><input id="{{ currentCutoffs[key].idTimeSlot }}" name="{{ day }}"
                                    slot="{{ currentCutoffs[key].timeSlot }}" style="border: none; text-align: center" type="text" max="99"
                                     maxlength="2" required pattern="[0-9]+" value="{{ currentCutoffs[key].cutOffTime }}"></td>
                                {% else %}
                                    <td style="width: 350px;"><input id="{{ currentCutoffs[key].idTimeSlot }}" name="{{ day }}"
                                     slot="{{ currentCutoffs[key].timeSlot }}" style="border: none; text-align: center" type="text" max="99"
                                     maxlength="2" required pattern="[0-9]+" value="{{ cutOffsArray[key % cutOffsArray|length] }}"></td>
                                {% endif  %}
                        {% endif  %}
                    {% endfor %}
                </tbody>
            </table>
        {% endfor %}
    </div>

    </form>


    <script type="text/javascript">
        let timeSave = [];
        daysOfTheWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        let savingAndMessageDiv = document.getElementById("savingAndMessageDiv");
        let mondayElements = document.getElementsByName("Monday");
        let tuesdayElements = document.getElementsByName("Tuesday");
        let wednesdayElements = document.getElementsByName("Wednesday");
        let thursdayElements = document.getElementsByName("Thursday");
        let fridayElements = document.getElementsByName("Friday");
        let saturdayElements = document.getElementsByName("Saturday");
        let sundayElements = document.getElementsByName("Sunday");

        let currentStore = document.getElementById("cmbStores");
        let btnSaveChangedData = document.getElementById("btnSave");
        let btnCancelTimeSlotChange = document.getElementById("btnCancel");
        var btnFilterByStore = document.getElementById('btnFilterByStore');

        btnCancelTimeSlotChange.addEventListener('click', ()=>{location.reload()})

        btnSaveChangedData.addEventListener("click", function(ev) {
            createDataArray()
            saveTimeSlotCutoff(currentStore.value);
        });

        function saveTimeSlotCutoff(store){
            let formData = new FormData();
            let json = JSON.stringify(timeSave);
            formData.append("store", store);
            formData.append("data", json);

            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function(){
                if (this.readyState === 4 && this.status === 200) {
                    let dataParse = JSON.parse(this.response);
                    document.getElementById("infoBox").style.display = "flex";
                    setTimeout(hideInfoBox, 5000);
                }
            }
            xhttp.open("POST", window.location.origin + "/sales/timeslots/saveTimeslotCutoffs");
            xhttp.send(formData);
            timeSave = [];
        }

        function filterTablesByStore(store){
            let formData = new FormData();
            formData.append("store", store);

            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function(){
                if (this.readyState === 4 && this.status === 200) {
                    let dataParse = JSON.parse(this.response);
                }
            }
            xhttp.open("POST", window.location.origin + "/sales/timeslots/index");
            xhttp.send(formData);
        }

        function hideInfoBox(){
            document.getElementById("infoBox").style.display = "none";
        }


        function createDataArray() {
            for (let i = 0; i < daysOfTheWeek.length; i++) {
                switch (daysOfTheWeek[i]) {
                    case 'Monday':
                        createObjectForParticularDay(mondayElements);
                        break;
                    case 'Tuesday':
                        createObjectForParticularDay(tuesdayElements);
                        break;
                    case 'Wednesday':
                        createObjectForParticularDay(wednesdayElements);
                        break;
                    case 'Thursday':
                        createObjectForParticularDay(thursdayElements);
                        break;
                    case 'Friday':
                        createObjectForParticularDay(fridayElements);
                        break;
                    case 'Saturday':
                        createObjectForParticularDay(saturdayElements);
                        break;
                    case 'Sunday':
                        createObjectForParticularDay(sundayElements);
                        break;
                }
            }
        }

        function createObjectForParticularDay(object){
            let day = object[0].getAttribute("name");
            let slotsObject = {};
            let objectWithSpecifiedDay = {};
            for(let i = 0; i< object.length; i++){
                let slot = object[i].getAttribute("slot");
                let value = object[i].value;
                let time = value;
                if(value.includes('-')){
                    time = value.substring(1)
                }
                slotsObject[slot] = time;
            }
            objectWithSpecifiedDay[day] = slotsObject;
            timeSave.push(objectWithSpecifiedDay);
        }


        let currentStores = document.getElementById("cmbStores");
        let startTime = document.getElementById("cmbStartTime");
        let endTime = document.getElementById("cmbEndTime");
        let timeslotSize = document.getElementById("cmbTimeslotSize");
        let defaultCapacity = document.getElementById("txtDefaultCapacity");
        let btnSaveTimeslotDefinition = document.getElementById("btnSaveTimeslotDefinition");


        btnSaveTimeslotDefinition.addEventListener("click", function(ev) {
            saveTimeSlotDefinitionForStore(currentStores.value, startTime.value, endTime.value, timeslotSize.value, defaultCapacity.value);
            setTimeout(function (){  btnFilterByStore.click(); }, 2000);
        });

        function saveTimeSlotDefinitionForStore(store, startTime, endTime, intervalMinutes, defaultCapacity){
            let formData = new FormData();
            var data = { "merchantReference": store, "startTime": startTime, "endTime": endTime, "intervalMinutes": intervalMinutes, "defaultCapacity": defaultCapacity };
            let json = JSON.stringify(data);
            formData.append("data", json);

            let xhttp = new XMLHttpRequest();
            xhttp.open("POST", window.location.origin + "/sales/timeslots-definition/save-timeslot-definition");
            xhttp.send(formData);
            timeSave = [];
        }
    </script>

{% endblock %}
